<?xml version="1.0" encoding="ISO-8859-1" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2017 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>responsivetext</type>
	    <name>Responsive text</name>
	    <image>images/responsivetext_24x24.png</image>
	    <category>Responsive controls</category>
	    <helpHtml>A version of the panel control that offers responsive design through the use of a set of dropdowns. The different values will alter the width of the panel, along with all of the controls within, depending on the page size. Pages are broken into grids 12 columns wide.</helpHtml>
	    
	    <addToNewResponsiveApplications>true</addToNewResponsiveApplications>
	    
	    <noDefaultName>true</noDefaultName>
	    
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	    
	    <properties>
	            
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        
	        <property>
	            <key>text</key>
	            <name>Text</name>
	            <setConstructValueFunction>return "Text"</setConstructValueFunction>
	            <changeValueJavaScript>bigtext</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the content of the control.</helpHtml>
	        </property>
	             
	        <property>
	            <key>format</key>
	            <name>Format</name>
	            <setConstructValueFunction>return "N";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{"value":"N","text":"None"},{"value":"P","text":"Paragraph"},{"value":"BF","text":"Line break"},{"value":"H1","text":"Header 1"},{"value":"H2","text":"Header 2"},{"value":"H3","text":"Header 3"},{"value":"H4","text":"Header 4"},{"value":"H5","text":"Header 5"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Enables the text to have a different type of html applied.</helpHtml>
	        </property>
	        
	       	<property>
	            <key>labelFor</key>
	            <name>Label for</name>
	             <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                 <![CDATA[
	                // return the list of all controls on the page with the one for this action selected
	                return "<option value=''>Please select...</option>" + getControlOptions(this.control);
	               	]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Label for is used to associate a text element to any other named control on the page. This is especially useful for validation.</helpHtml>
	        </property>
	        
	         <property>
	            <key>extraSmall</key>
	            <name>Extra small width</name>
	            <setConstructValueFunction>return "xs-12"</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"xs-1", text:"1/12"}, {value:"xs-2", text:"2/12s"}, {value:"xs-3", text:"3/12s"}, {value:"xs-4", text:"4/12s"}, {value:"xs-5", text:"5/12s"}, {value:"xs-6", text:"6/12s"}, {value:"xs-7", text:"7/12s"}, {value:"xs-8", text:"8/12s"}, {value:"xs-9", text:"9/12s"}, {value:"xs-10", text:"10/12s"}, {value:"xs-11", text:"11/12s"}, {value:"xs-12", text:"12/12s"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is very small. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>small</key>
	            <name>Small width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"sm-1", text:"1/12"}, {value:"sm-2", text:"2/12s"}, {value:"sm-3", text:"3/12s"}, {value:"sm-4", text:"4/12s"}, {value:"sm-5", text:"5/12s"}, {value:"sm-6", text:"6/12s"}, {value:"sm-7", text:"7/12s"}, {value:"sm-8", text:"8/12s"}, {value:"sm-9", text:"9/12s"}, {value:"sm-10", text:"10/12s"}, {value:"sm-11", text:"11/12s"}, {value:"sm-12", text:"12/12s"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is small. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>medium</key>
	            <name>Medium width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"md-1", text:"1/12"}, {value:"md-2", text:"2/12s"}, {value:"md-3", text:"3/12s"}, {value:"md-4", text:"4/12s"}, {value:"md-5", text:"5/12s"}, {value:"md-6", text:"6/12s"}, {value:"md-7", text:"7/12s"}, {value:"md-8", text:"8/12s"}, {value:"md-9", text:"9/12s"}, {value:"md-10", text:"10/12s"}, {value:"md-11", text:"11/12s"}, {value:"md-12", text:"12/12s"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is of a medium size. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>large</key>
	            <name>Large width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"lg-1", text:"1/12"}, {value:"lg-2", text:"2/12s"}, {value:"lg-3", text:"3/12s"}, {value:"lg-4", text:"4/12s"}, {value:"lg-5", text:"5/12s"}, {value:"lg-6", text:"6/12s"}, {value:"lg-7", text:"7/12s"}, {value:"lg-8", text:"8/12s"}, {value:"lg-9", text:"9/12s"}, {value:"lg-10", text:"10/12s"}, {value:"lg-11", text:"11/12s"}, {value:"lg-12", text:"12/12s"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is large. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	    </properties>
	    
	    <resources>
			<resource>
				<type>cssLink</type>
				<contents>styles/bootstrap.css</contents>
			</resource>

			<resource>
				<type>javascriptLink</type>
				<contents>scripts_min/bootstrap.min.js</contents>
			</resource>
		</resources>
	    
	    <getHtmlFunction>
	        <![CDATA[
// return the html for adding to our parent object	 
var text = this.text;
if (!text) text = "&nbsp;"
var open = "span";
var close = "span";       
switch (this.format) {
	case "BR" :
		open = "br><span";
	break;
	case "P" :  case "H1": case "H2": case "H3": case "H4": case "H5" : 
		open = close = this.format.toLowerCase();		
	break; 
}
var labelFor = "";
if (this.labelFor) {
	labelFor = "for='" + this.labelFor + "' ";
	if (open == "span") {
		open = "label";
		close = "label";
	} else {
		open = "label><" + open;
		close = close + "></label";
	}
}

// get the style classes for this control
classes = getStyleClasses(this);

// add appropriate col width classes if they are specified
if (this.extraSmall) classes += " col-" + this.extraSmall;
if (this.small) classes += " col-" + this.small;
if (this.medium) classes += " col-" + this.medium;
if (this.large) classes += " col-" + this.large;

// return our html for adding to our parent object
return "<" + open + " id='" + this.id + "' " + labelFor + " class='r-text" + classes + "'" + (this.text ? "" : " style='min-height:15px;'") + ">" + text + "</" + close + ">";
	        ]]>
	    </getHtmlFunction>
	    
	    <saveJavaScript>
	        <![CDATA[
// get the style attribute 	        
var style = this.object.attr("style");
// if the min-height:15 is present but there are children
if (style && style.indexOf("min-height:15px;") > -1 && this.childControls && this.childControls.length > 0) {
	// remove the min-height
	style = style.replace("min-height:15px;","");
	// if there are other attributes
	if (style) {
		// update changed style
		this.object.attr("style",style );
	} else {
		// remove empty style
		this.object.removeAttr("style");
	}
}
	        ]]>
	    </saveJavaScript>
	    
	    	    <getDataFunction>
	        <![CDATA[
return $("#" + id).html();
			]]>
	    </getDataFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[
var control = $("#" + id);	        
if (data != null && data !== undefined) {	
	data = makeDataObject(data, field);
	if (data.rows && data.rows[0]) {	        		
		if (field && data.fields) {
			for (var i in data.fields) {
				if (data.fields[i] && data.fields[i].toLowerCase() == field.toLowerCase()) {
					control.html(data.rows[0][i]);
					break;
				}
			}
		} else {
			control.html(data.rows[0][0]);
		}
	} else {
		control.html("");
	}
} else {
	control.html("");
}
			]]>
	    </setDataJavaScript>
	    
	    <events>
	        <event>
	            <type>mouseover</type>
	            <name>Mouse over</name>
	        </event>
	        <event>
	            <type>mouseout</type>
	            <name>Mouse out</name>
	        </event>
	        <event>
	            <type>click</type>
	            <name>Click</name>
	        </event>	        
	    </events>
	    
	    <styles>       
	        <style>
	            <name>Responsive text</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	</control>
</controls>