<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2014 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

RapidSOA is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->
	
	<control>
	    
	    <type>slidePanelPane</type>
	    <name>Slide panel</name>	 
	    	    
	    <noDefaultName>true</noDefaultName>
	      	    
	    <canUserInsert>true</canUserInsert>    

	    <properties>
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>	            
	        </property>	
	       	<property>
	       		<key>panelId</key>
	       		<name>panelId</name>
	       		<visible>false</visible>
	       	</property> 
	    </properties>
	    	    
	    <getHtmlFunction>
	        <![CDATA[
// return our html 
return "<div id='" + this.id + "' class='slidePanelPane' style='display:none;'></div>";
	        ]]>
	    </getHtmlFunction> 
	    
	    <createJavaScript>
	    	<![CDATA[
// retain the slide panel Id once only
if (!this.slidePanelId) this.slidePanelId = this.object.prev().attr("id");	    	
	    	]]>
	    </createJavaScript> 
	    
	    <rebuildJavaScript>
	    	<![CDATA[
// add the opener id to this control's object
this.object.attr("data-panel",this.slidePanelId);
// add this control's id to the opener object	    
this.parentControl.object.find("#" + this.slidePanelId).attr("data-pane",this.id);	
	    	]]>
	    </rebuildJavaScript>
	    
	    <removeJavaScript>
	        <![CDATA[
var slidePanelId = this.object.attr("data-panel");
// loop the page child controls
for (var i in _page.childControls) {
	// get the potential slide panel
	var slidePanel = _page.childControls[i];
	// break when we find our position amongst the page child controls
	if (slidePanel.id == slidePanelId) {		
		// remove from page childControls
		_page.childControls.splice(i - 1, 1);
		// remove object
		slidePanel.object.remove();
		// we're done
		break;
	}
} 	
// remove the pane
this.object.remove();
	        ]]>
	    </removeJavaScript>	    
	    
<initDesignJavaScript>
	        <![CDATA[
var slidePanelId = this.object.attr("data-panel");
// loop the page child controls
for (var i in _page.childControls) {
	// get the potential slide panel
	var slidePanel = _page.childControls[i];
	// break when we find our position amongst the page child controls
	if (slidePanel.id == slidePanelId) {		
		// rebuild it
		rebuildHtml(slidePanel);
		// we're done
		break;
	}
}   
	        ]]>	   	        
	    </initDesignJavaScript>
 	    	   	    	    
	    <styles>
	        <style>
	            <name>Slide panel</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>	    	    	    	    
	    	        	    
	</control>
		
	<control>
	    
	    <type>slidePanel</type>
	    <name>Slide panel</name>	    
	    <image>images/slidepanel_24x24.png</image>  	
	    
	    <addToNewApplications>true</addToNewApplications>
	    
		<noDefaultName>true</noDefaultName>
			    	    	    	    
	    <canUserAdd>true</canUserAdd>
  
	    <properties>
	        <property>
	            <key>visible</key>
	            <name>Visible</name>
	            <setConstructValueFunction>return false;</setConstructValueFunction>
	            <changeValueJavaScript>slidePanelVisibility</changeValueJavaScript>		                       
	        </property>	
	        <property>
	            <key>slidePanelId</key>
	            <name>slidePanelId</name>
	            <visible>false</visible>
	        </property>
	    </properties>
	    
	    <resources>
	        <resource>
	            <type>file</type>
	            <contents>images/controls/slidepanel/slidepanel_48x48.png</contents>
	        </resource>
	        <resource>
	            <type>css</type>
	            <contents>
	                <![CDATA[	                
.slidePanel {
	position: absolute;
	padding: 5px;
	width: 20px;
	height: 20px;
	z-index: 101;
}

.slidePanel img {
	width: 100%;
	height: 100%;
}

.slidePanelPane {
	position: absolute;
	float: left;
	width: 200px;
	height: 100%;
	background-color: white;
	border-right: 1px solid black;
	z-index: 100;
}
	                ]]>
				</contents>
	        </resource>
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[
// 	        
// return html for adding to our parent object      
return "<div id='" + this.id + "' class='slidePanel'><img src='images/controls/slidepanel/slidepanel_48x48.png'/></div>";
	        ]]>
	    </getHtmlFunction>
	    	    
	    <constructJavaScript>
	        <![CDATA[	        
// add the panel next to the opener
this.parentControl.childControls.push(new Control("slidePanelPane", this.parentControl));
	        ]]>
	    </constructJavaScript>	
	    	    	    
	    <rebuildJavaScript>
	        <![CDATA[
// get the pane id
var paneId = this.object.attr("data-pane");
// get the pane
var pane = this.parentControl.object.find("#" + paneId);	     
// check the visibilty property   
if (this.visible) {
	pane.show();
} else {
	pane.hide();
}
	        ]]>
	    </rebuildJavaScript>	
	    
	    <removeJavaScript>
	        <![CDATA[
var slidePaneId = this.object.attr("data-pane");
// loop the page child controls
for (var i in _page.childControls) {
	// get the potential slide pane
	var slidePane = _page.childControls[i];
	// break when we find our position amongst the page child controls
	if (slidePane.id == slidePaneId) {		
		// remove from page childControls
		_page.childControls.splice(i - 1, 1);
		// remove object
		slidePane.object.remove();
		// we're done
		break;
	}
} 	
// remove the closer
this.object.remove();
	        ]]>
	    </removeJavaScript>
	    
	   	<initDesignJavaScript>
	        <![CDATA[
this.object.mousedown( {slidePanel : this}, function(ev) {
	// get the slidePanel
	var slidePanel = ev.data.slidePanel;
	// toggle visibility
	slidePanel.visible = !slidePanel.visible
	// add/remove classes
	if (slidePanel.visible) {
		slidePanel.object.addClass("slidePanelOpen");
		slidePanel.object.removeClass("slidePanelClosed");
	} else {
		slidePanel.object.addClass("slidePanelClosed");
		slidePanel.object.removeClass("slidePanelOpen");
	}
	// update html
	rebuildHtml(slidePanel);
});       
	        ]]>	   	        
	    </initDesignJavaScript>
	    	    
	    <styles>
	        <style>
	            <name>Opener</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>   
	        <style>
	            <name>Panel open</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return ".slidePanelOpen";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>  
	        <style>
	            <name>Panel closed</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return ".slidePanelClosed";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>  
	    </styles>	
	    
	   	<initJavaScript>
	        <![CDATA[
$("#" + id).click( function(ev) {
	// get a reference to the slidePanel
	var slidePanel = $("#" + id);
	// get the slidePanelPaneId
	var slidePanelPaneId = slidePanel.attr("data-pane");
	// get the pane
	var slidePanelPane = $("#" + slidePanelPaneId);
	// check visibility
	if (slidePanelPane.is(":visible")) {
		// retain the current (full) width
		var width = slidePanelPane.css("width");
		// animate down to zero
		slidePanelPane.animate({width:"0"}, 500, function() {
			// hide and reinstate width when complete
			slidePanelPane.hide().css({width:width});
		});
		// toggle open closed
		slidePanel.addClass("slidePanelOpen");
		slidePanel.removeClass("slidePanelClosed");
	} else {
		// retain the current (full) width
		var width = slidePanelPane.css("width");
		// set width to 0 and show
		slidePanelPane.css({width:"0"}).show();
		// animate to full width
		slidePanelPane.animate({width:width}, 500);
		// toggle open closed
		slidePanel.addClass("slidePanelClosed");
		slidePanel.removeClass("slidePanelOpen");
	}
});	        
	        ]]>	        	       	        
	    </initJavaScript>
	    	    	    	            	    	    	        	    	    
	</control>
	
</controls>	