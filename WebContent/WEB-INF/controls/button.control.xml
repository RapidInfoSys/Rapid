<?xml version="1.0" encoding="ISO-8859-1" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2016 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>button</type>
	    <name>Button</name>
	    <image>images/button_24x24.png</image>
	    
	    <addToNewApplications>true</addToNewApplications>
	         
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	                   
	        <property>
	            <key>label</key>
	            <name>Label</name>
	            <setConstructValueFunction>return "button";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Text to appear on the button.</helpHtml>
	        </property>
	        
	        <property>
	            <key>title</key>
	            <name>Title</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Displays a message when hovered over. Useful for screen readers.</helpHtml>
	        </property>
	        
	        <property>
	            <key>glyphCode</key>
	            <name>Glyph</name>
	            <setConstructValueFunction>
	                <![CDATA[
	                return ""
	                ]]>
	            </setConstructValueFunction>
	            <changeValueJavaScript>glyphCode</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Attaches a glyph to the button. Useful for adding extra direction or improving aesthetics of a button, such as adding a magnifying glass for searching.</helpHtml>
	        </property>
	        
	        <property>
	            <key>glyphPosition</key>
	            <name>Glyph position</name>
	            <setConstructValueFunction>return "left";</setConstructValueFunction>
	            <changeValueJavaScript>buttonGlyphPosition</changeValueJavaScript>	
	            <getValuesFunction>
	                <![CDATA[
return ["left","right","top","bottom"];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the position of the glyph on the button.</helpHtml>
	        </property>
	           
	        <property>
	            <key>glyphBackground</key>
	            <name>Glyph background</name>
	            <setConstructValueFunction>return "none";</setConstructValueFunction>
	            <changeValueJavaScript>buttonGlyphBackground</changeValueJavaScript>	
	            <getValuesFunction>
	                <![CDATA[
return ["none","circle","circle-o","square","square-o"];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Applies an additional style to the glyph.</helpHtml>
	        </property>
	        
	    </properties>
	    
	    <resources>
	        <resource>
	            <type>cssFile</type>
	            <contents>styles/fonts/fontawesome/css/font-awesome.css</contents>
	        </resource>
	        <!-- Some browsers choose the tff instead of the woff so both are included -->
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fontawesome-webfont.woff</contents>
	        </resource>
	        <resource>
	            <type>file</type>
	            <contents>styles/fonts/fontawesome/fonts/fontawesome-webfont.ttf</contents>
	        </resource>
	        <resource>
	            <type>css</type>
	            <contents>
.buttonGlyphWithBackground {
	font-size: 0.5em;
}	                
	            </contents>
	        </resource>
	    </resources>
	    	    	    
	    <getHtmlFunction>
	        <![CDATA[	  
var html = "";	            
if (this.glyphCode) {	

	var glyph = "<span class='fa buttonGlyph'>" + this.glyphCode + "</span>";	 

	if (this.glyphBackground && this.glyphBackground != "none") {
		glyph = "<span class='fa-stack fa-lg buttonGlyphWithBackground buttonGlyph'><i class='fa fa-" + this.glyphBackground + " fa-stack-2x buttonGlyphBackground'></i><i class='fa fa-stack-1x'>" + this.glyphCode + "</i></span>";
	}
		       
	var html = "<button id='" + this.id + "' type='button' class='button" + getStyleClasses(this) + "' " + (this.title ? "title='" + escapeApos(this.title) + "'" : "") + ">";
	if (this.glyphPosition == "left" || this.glyphPosition == "top") html += glyph;
	if (this.glyphPosition == "left") html += "&nbsp;";
	if (this.glyphPosition == "top") html += "<br/>";
	html += this.label;
	if (this.glyphPosition == "bottom") html += "<br/>";
	if (this.glyphPosition == "right") html += "&nbsp;";
	if (this.glyphPosition == "right" || this.glyphPosition == "bottom") html += glyph;
	html += "</button>";
} else {
	html = "<button id='" + this.id + "' type='button' class='button" + getStyleClasses(this) + "' " + (this.title ? "title='" + escapeApos(this.title) + "' " : "") + ">" + this.label + "</button>";
}
return html
	        ]]>
	    </getHtmlFunction> 
	    
	    <events>
	        <event>
	            <type>click</type>
	            <name>Click</name>
	        </event>
	    </events>
	    
	    <styles>
	        <style>
	            <name>Button</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Button glyph</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " .buttonGlyph";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Button glyph background</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " .buttonGlyphBackground";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:hover</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + ":hover";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	</control>
</controls>