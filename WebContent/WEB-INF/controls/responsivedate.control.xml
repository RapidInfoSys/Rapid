<?xml version="1.0" encoding="ISO-8859-1" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2016 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>responsivedate</type>
	    <name>Responsive date</name>
	    <image>images/responsivedate_24x24.png</image>
	    <category>Responsive controls</category>
	    <helpHtml>A version of the date control that offers responsive design. This control will alter its size based on the parent control it is in, as well as alter to suit the screen size it is viewed on.</helpHtml>
	    <addToNewApplications>true</addToNewApplications>
	   	          
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	     <canBeUsedForFormPageVisibilty>true</canBeUsedForFormPageVisibilty>
	    <canValidate>true</canValidate>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        
	        <property>
	            <key>label</key>
	            <name>Form summary label</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>formText</changeValueJavaScript>
	            <helpHtml>Summary label to appear at the end of the form. Leave blank to have the control and its value hidden.</helpHtml>
	        </property>
	                    
	        <property>
	            <key>value</key>
	            <name>Value</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets an initial value for the date.</helpHtml>
	        </property>
	        
	        <property>
	            <key>format</key>
	            <name>Date format</name>
	            <setConstructValueFunction>return "dd/mm/yy";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [["dd/mm/yy","dd/mm/yyyy"],["mm/dd/yy","mm/dd/yyyy"],["yy-mm-dd","yyyy-mm-dd"],["dd-M-yy","dd-MMM-yyyy"],["d MM yy","Short day, full month"],["DD, d MM, yy","Full date details"]];
					]]>
	            </getValuesFunction>
	            <helpHtml>Sets the date format. Useful for other regions.</helpHtml>
	        </property>
	        
	        <property>
	            <key>readonly</key>
	            <name>Read-only</name>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Whether users are able to enter dates using the keyboard. If not checked additional validation will be required.</helpHtml>
	        </property>
	        
	        <property>
	            <key>minDate</key>
	            <name>Min date</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Sets the minimum date. Dates will be unable to be selected earlier than this date. Valid periods are "y" for years, "m" for months, "w" for weeks, and "d" for days. For example, "+1m +7d" represents one month and seven days from today.</helpHtml>
	        </property>
	        
	        <property>
	            <key>maxDate</key>
	            <name>Max date</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Sets the maximum date. Dates will be unable to be selected past this date. Valid periods are "y" for years, "m" for months, "w" for weeks, and "d" for days. For example, "+1m +7d" represents one month and seven days from today.</helpHtml>
	        </property>
	        
	        <property>
	            <key>yearRange</key>
	            <name>Year range</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Sets the range of years that can be selected. For example, "2010:2016" will set the range from the first date in 2010 to the last date in 2016.</helpHtml>
	        </property>
	        
	        <property>
	        	<key>showOtherMonths</key>
	        	<name>Show other months</name>
	        	<setConstructValueFunction>return false;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Displays dates from the next and previous months.</helpHtml>
	        </property>
	        
	        <property>
	        	<key>selectOtherMonths</key>
	        	<name>Select other months</name>
	        	<setConstructValueFunction>return false;</setConstructValueFunction>
	            <changeValueJavaScript>dateSelectOtherMonths</changeValueJavaScript>
	            <helpHtml>Allows you to select dates from the next and previous months.</helpHtml>
	        </property>
	        
	        <property>
	            <key>extraSmall</key>
	            <name>Extra small width</name>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"xs-1", text:"1/12"}, {value:"xs-2", text:"2/12s"}, {value:"xs-3", text:"3/12s"}, {value:"xs-4", text:"4/12s"}, {value:"xs-5", text:"5/12s"}, {value:"xs-6", text:"6/12s"}, {value:"xs-7", text:"7/12s"}, {value:"xs-8", text:"8/12s"}, {value:"xs-9", text:"9/12s"}, {value:"xs-10", text:"10/12s"}, {value:"xs-11", text:"11/12s"}, {value:"xs-12", text:"12/12s"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is very small. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>small</key>
	            <name>Small width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"sm-1", text:"1/12"}, {value:"sm-2", text:"2/12s"}, {value:"sm-3", text:"3/12s"}, {value:"sm-4", text:"4/12s"}, {value:"sm-5", text:"5/12s"}, {value:"sm-6", text:"6/12s"}, {value:"sm-7", text:"7/12s"}, {value:"sm-8", text:"8/12s"}, {value:"sm-9", text:"9/12s"}, {value:"sm-10", text:"10/12s"}, {value:"sm-11", text:"11/12s"}, {value:"sm-12", text:"12/12s"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is small. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>medium</key>
	            <name>Medium width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"md-1", text:"1/12"}, {value:"md-2", text:"2/12s"}, {value:"md-3", text:"3/12s"}, {value:"md-4", text:"4/12s"}, {value:"md-5", text:"5/12s"}, {value:"md-6", text:"6/12s"}, {value:"md-7", text:"7/12s"}, {value:"md-8", text:"8/12s"}, {value:"md-9", text:"9/12s"}, {value:"md-10", text:"10/12s"}, {value:"md-11", text:"11/12s"}, {value:"md-12", text:"12/12s"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is of a medium size. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	        
	        <property>
	            <key>large</key>
	            <name>Large width</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{value:"", text:"Please select..."}, {value:"lg-1", text:"1/12"}, {value:"lg-2", text:"2/12s"}, {value:"lg-3", text:"3/12s"}, {value:"lg-4", text:"4/12s"}, {value:"lg-5", text:"5/12s"}, {value:"lg-6", text:"6/12s"}, {value:"lg-7", text:"7/12s"}, {value:"lg-8", text:"8/12s"}, {value:"lg-9", text:"9/12s"}, {value:"lg-10", text:"10/12s"}, {value:"lg-11", text:"11/12s"}, {value:"lg-12", text:"12/12s"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the width of the panel when the screen size is large. Pages are broken into grids 12 columns wide.</helpHtml>
	        </property>
	               
	    </properties>
	    
		<resources>
	    
	    	<resource>
	    		<type>cssFile</type>
	    		<contents>styles/controls/date.css</contents>
	    	</resource>
	    		    		    	
	    	<resource>
	    		<type>javascriptFile</type>
	    		<contents>scripts/controls/date.js</contents>
	    	</resource>
	    	
	    	<resource>
	    	    <type>file</type>
	    	    <contents>images/controls/date/date_17x15.gif</contents>
	    	</resource>
	    	
	    	<resource>
				<type>cssLink</type>
				<contents>styles/bootstrap.css</contents>
			</resource>

			<resource>
				<type>javascriptLink</type>
				<contents>scripts_min/bootstrap.min.js</contents>
			</resource>
	    	
	    	<resource>
	    	    <type>css</type>
	    	    <contents>
input.date {
	background: url("../../../images/controls/date/date_17x15.gif") 100% 50% no-repeat;
	background-color: #FFF;
}
	    	    </contents>
	    	</resource>
	    	
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[
// return our html for adding to our parent object
var html = "";
var classes = getStyleClasses(this);

// add appropriate col width classes if they are specified
if (this.extraSmall) classes += " col-" + this.extraSmall;
if (this.small) classes += " col-" + this.small;
if (this.medium) classes += " col-" + this.medium;
if (this.large) classes += " col-" + this.large;

var placeholder = "Choose a date";
switch (this.dateFormat) {
	case "dd/mm/yy":
		placeholder = "dd/mm/yyyy";
		break;
	case "mm/dd/yy":
		placeholder = "mm/dd/yyyy";
		break;
	case "yy-mm-dd":
		placeholder = "yyyy-mm-dd";
		break;
	case "dd-M-yy":
		placeholder = "dd-mmm-yyyy";
		break;
}
if (this.readonly === undefined) this.readonly = true;
html = "<input name='" + this.id + "' " + " class='date form-control" + classes + " ' value='" + this.value + "'placeholder='" + placeholder + "'" + (this.readonly ? "readonly='readonly'" : "") + "/>";

return "<div id='" + this.id + "' class='r-date" + classes + "'>" + html + "</div>";
	        ]]>
	    </getHtmlFunction> 
	    
	    <getDetailsFunction>
	        <![CDATA[
return {
	format: this.format,
	readonly: this.readonly,
	minDate: this.minDate,
	maxDate: this.maxDate,
	yearRange: (this.yearRange ? this.yearRange: "-100:+10"),
	showOtherMonths: this.showOtherMonths,
	selectOtherMonths: this.showOtherMonths && this.selectOtherMonths
};
	        ]]>
	    </getDetailsFunction>
	    
	    <getDataFunction>
	        <![CDATA[
return $("#" + id).find("input").val();
			]]>
	    </getDataFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[
var value = "";
if (data != null && data !== undefined) {
	data = makeDataObject(data, field);
	if (data.rows && data.rows[0]) {
		if (field && data.fields && data.fields.length > 0) {
			for (var i in data.fields) {
				if (data.fields[i] && data.fields[i].toLowerCase() == field.toLowerCase()) {
					value = data.rows[0][i];
					break;
				}
			}
		} else {
			if (data.rows[0][0] != null && data.rows[0][0] !== undefined) {
				value = data.rows[0][0];
			}
		}
	}
}
// get control container
var control = $("#" + id);
if (changeEvents) control.trigger("change");
// update control to input
control = control.find("input");
// try iso dates first, as returned from SOAP webservices
try {
	var date = $.datepicker.parseDate( "yy-mm-dd", value);
	control.datepicker("setDate",date);
} catch (ex) {
	control.datepicker("setDate",value);
}
			]]>
	    </setDataJavaScript>
	    
	    <events>
	         <event>
	            <type>click</type>
	            <name>Click</name>
	        </event>
	        <event>
	            <type>keyup</type>
	            <name>Key up</name>
	        </event>
	        <event>
	            <type>change</type>
	            <name>Change</name>
	        </event>
	        <event>
	            <type>blur</type>
	            <name>Blur</name>
	        </event>
	    </events>
	    
	    <styles>
	        <style>
	            <name>Responsive date</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " input";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:hover</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " input:hover";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>:focus</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " input:focus";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Responsive container</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id;
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
		<initJavaScript>
	        <![CDATA[
var format = details.format;
if (!format) format = "dd/mm/yy";
$( "#" + id ).find("input").datepicker({
	changeMonth: true,
    changeYear: true,
    dateFormat: format,
    maxDate: details.maxDate,
    minDate: details.minDate,
    yearRange: details.yearRange,
    showOtherMonths: details.showOtherMonths,
    selectOtherMonths: details.selectOtherMonths,
    constrainInput: true,
    onChangeMonthYear: function(year, month, inst) {
    	try {
    		var dp = $(this);
	    	var d = dp.datepicker("getDate");
	    	if (d) {
		      	d.setMonth(month-1);
		      	d.setFullYear(year);
		      	dp.datepicker("setDate", d);
			}
		} catch(ex){}
    }
}).change( function (ev) {
	var datePicker = $(this);
	var date = datePicker.val();
	if (date) {
		var parts = date.split("/");
		if (parts.length == 3) {
			if (parts[2].length < 4) {
				try {
					var year = parseInt(parts[2]);
					var now = new Date();
					var y = now.getFullYear() + "";
					var y1 = y.substr(0,2) * 1;
					var y2 = y.substr(2) * 1;
					if (year > y2 + 10) y1--;
					if (parts[2].length == 1) date = parts[0] + "/" + parts[1] + "/" + y1 + "0" + parts[2];
					if (parts[2].length == 2) date = parts[0] + "/" + parts[1] + "/" + y1 + parts[2];
					if (parts[2].length == 3) date = parts[0] + "/" + parts[1] + "/" + (y1 + "").substr(0,1) + parts[2];
					datePicker.val(date);
				} catch (ex) {}
			}
		}
		if (details.format == "dd-M-yy") datePicker.val(date.toUpperCase());
	}
}).mouseup( function (ev){
	if ((details.readonly || details.readonly === undefined)) {
		var datePicker = $(this);
		var widget = datePicker.datepicker("widget");
		if (widget.is(":visible") && widget.css("opacity") == 1) {
			datePicker.datepicker("hide");
		} else {
			datePicker.datepicker("show");
		}
	}
});
	        ]]>
	    </initJavaScript>

	    <runtimeProperties>
	    	<runtimeProperty>
	    		<type>age</type>
	    		<name>Age</name>
	    		<getPropertyFunction>
	    			        <![CDATA[
var dp = $("#" + id).find("input");
if (dp.val()) {
	var d = dp.datepicker( "getDate" );
	var age = (Date.now() - d) / 31557600000;
	return age;
} else {
	return null;
}
	    			        ]]>
	    		</getPropertyFunction>
	    	</runtimeProperty>
	    </runtimeProperties>
	    	    
	</control>
</controls>