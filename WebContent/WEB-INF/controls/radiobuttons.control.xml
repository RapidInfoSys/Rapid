<?xml version="1.0" encoding="ISO-8859-1" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2014 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

RapidSOA is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>radiobuttons</type> 
	    <name>Radio buttons</name>	   
	    <image>images/radiobutton_24x24.png</image>       
	    <category>Form controls</category>
	    
	    <addToNewApplications>true</addToNewApplications>
	     
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	     <canBeUsedForFormPageVisibilty>true</canBeUsedForFormPageVisibilty>
	    <canValidate>true</canValidate>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>	            
	        </property>	
	        
	        <property>
	            <key>label</key>
	            <name>Form summary label</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>formText</changeValueJavaScript>	        
	        </property>
	        
	        <property>
	            <key>codes</key>
	            <name>Codes</name>
	            <visible>false</visible>
	        </property> 
	        
	        <property>
	            <key>buttons</key>
	            <name>Buttons</name>
	            <visible>true</visible>
	            <setConstructValueFunction>return [{value:"", label:"Radio button 1"}, {value:"", label:"Radio button 2"}];</setConstructValueFunction>
	            <changeValueJavaScript>radiobuttons</changeValueJavaScript>	
	            <refreshHtml>true</refreshHtml>	            
	        </property>  
	            
	        <property>
	            <key>value</key>
	            <name>Inital value</name>
	            <changeValueJavaScript>text</changeValueJavaScript>	     
	            <refreshHtml>true</refreshHtml>       
	        </property>	  
	            
	        <property>
	            <key>buttonposition</key>
	            <name>Button position</name>	            
	            <setConstructValueFunction>return "L";</setConstructValueFunction>	            
	            <changeValueJavaScript>select</changeValueJavaScript>	
	            <getValuesFunction>return [{value:"L", text:"left"}, {value:"R", text:"right"}];</getValuesFunction>    
	            <refreshHtml>true</refreshHtml>        
	        </property>
	        
	        <property>
	            <key>layout</key>
	            <name>Layout</name>
	            <setConstructValueFunction>return "H";</setConstructValueFunction>  	            
	            <changeValueJavaScript>select</changeValueJavaScript>	            
	            <getValuesFunction>return [{value:"H", text:"horizontal"}, {value:"V", text:"vertical"}];</getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	        </property>
	        
	        <property>
	            <key>group</key>
	            <name>Group</name>
	            <changeValueJavaScript>text</changeValueJavaScript>	            
	            <refreshHtml>true</refreshHtml>
	        </property>	
	        
	    </properties>
	    
	    <getHtmlFunction>
	        <![CDATA[
// return our html for adding to our parent object	
var radiobuttonHtml = "";
// check we have buttons
if (this.buttons) {
	// if the options are a string turn them in an array
	if ($.type(this.buttons) == "string") this.buttons = JSON.parse(this.buttons);
	// if codes is a false string make it a boolean
	if (this.codes == "false") this.codes = false;
	// loop the options
	for (var i in this.buttons) {
		var button = this.buttons[i];
		var label = button.label;
		var value = (this.codes ? button.value : label);
		if (this.buttonposition == 'R') radiobuttonHtml += label;
		radiobuttonHtml += "<input type='radio' name='" + (this.group ? this.group : this.id) + "' id='" + this.id + i + "' value='" + value + "' " + (this.value == value ? "checked='checked'" :  "") + "></input>";
		if (this.buttonposition == 'L') radiobuttonHtml += label;
		if (this.layout == 'V') radiobuttonHtml += "<br/>";
	}
} else {
	radiobuttonHtml = "No buttons";
}
// place into the select
var html = "<label id='" + this.id + "' class='radiobuttons" + getStyleClasses(this) + "'>" + radiobuttonHtml + "</label>";
// return
return html;
	        ]]>
	    </getHtmlFunction> 
	    
		<updateChildObjects>true</updateChildObjects>
	    
	    <getDataFunction>
	        <![CDATA[
return $("#" + id).children("input[type=radio]:checked").val();
			]]>
	    </getDataFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[
if (data != null && data !== undefined) {
	var radiobuttons = $("#" + id);
	radiobuttons.children("input[type=radio]").prop('checked',false);
	data = makeDataObject(data, field);
	var value = null;
	if (data.rows && data.rows[0]) {	        		
		if (field && data.fields) {
			for (var i in data.fields) {
				if (data.fields[i].toLowerCase() == field.toLowerCase()) {
					value = data.rows[0][i];					
					break;
				}
			}
		} else {
			value = data.rows[0][0];
		}
	} 
	if (value) {
		var button = radiobuttons.children("input[type=radio][value='" + value + "']");
		if (button[0]) {
			button.prop('checked',true);	
			if (changeEvents) button.trigger("change");		
		}		
	}
}		        
        
	        ]]>
	    </setDataJavaScript>
	    
	    <events>
	        <event>
	            <type>change</type>
	            <name>Change</name>
	        </event>
	    </events>
	    
	    <styles>
	        <style>
	            <name>Radio button group</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Radio buttons</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " input[type=radio]";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Labels</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " span";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	</control>
</controls>