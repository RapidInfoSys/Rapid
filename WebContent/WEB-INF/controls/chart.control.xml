<?xml version="1.0" encoding="ISO-8859-1" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2016 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>chart</type>
	    <name>Chart</name>
	    <image>images/chart_24x24.png</image>
	    <helpHtml>A control that incorporates Google's Javascript charts, this control is very useful for displaying data in a number of different styles. With plenty of options to get you started, you can create very detailed, personalised charts easily. Works best when data is copied into it.</helpHtml>
	    
	    <addToNewApplications>false</addToNewApplications>
	         
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        
	        <property>
	            <key>chartType</key>
	            <name>Type</name>
	            <setConstructValueFunction>return "Line";</setConstructValueFunction>
	            <changeValueJavaScript>chartType</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [["Line"],["Bar"],["Pie"]];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Sets the chart type from line to bar or pie.</helpHtml>
	        </property>
	        
	        <property>
	            <key>left</key>
	            <name>Left</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>A number or percentage for how far from the left the chart is within the chart area.</helpHtml>
	        </property>
	        
	         <property>
	            <key>top</key>
	            <name>Top</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>A number or percentage for how far from the top the chart is within the chart area.</helpHtml>
	        </property>
	        
	         <property>
	            <key>width</key>
	            <name>Width</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>A number or percentage of the width of the chart relative to the available chart area.</helpHtml>
	        </property>
	        
	         <property>
	            <key>height</key>
	            <name>Height</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>A number or percentage of the height of the chart relative to the available chart area.</helpHtml>
	        </property>
	        
	         <property>
	            <key>colours</key>
	            <name>Colours</name>
	            <changeValueJavaScript>bigtext</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>A comma separated list of colours to use for the chart elements.</helpHtml>
	        </property>
	        
	        <property>
	            <key>legendPosition</key>
	            <name>Legend position</name>
	            <setConstructValueFunction>return "right";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [["top"],["right"],["bottom"],["left"],["in"],["labeled"],["none"]];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>The position of the legend or key within the chart area.</helpHtml>
	        </property>
	        
	        <property>
	            <key>legendAlignment</key>
	            <name>Legend alignment</name>
	            <setConstructValueFunction>return "auto";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [["auto"],["start"],["center"],["end"]];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>The alignment of the legend or key to be used at its position.</helpHtml>
	        </property>
	        
	         <property>
	            <key>curveType</key>
	            <name>Curve lines </name>
	            <visible>false</visible>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	             <refreshHtml>true</refreshHtml>
	             <helpHtml>Whether to smooth the lines by curving them.</helpHtml>
	        </property>
	        
	         <property>
	            <key>isStacked</key>
	            <name>Stacked</name>
	            <visible>false</visible>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	             <refreshHtml>true</refreshHtml>
	             <refreshProperties>true</refreshProperties>
	             <helpHtml>Stacks multiple series into the same column.</helpHtml>
	        </property>
	        
	        <property>
	            <key>pieSliceText</key>
	            <name>Pie slice text</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "percentage";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [["percentage"],["value"],["label"],["none"]];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>The content of the text displayed on each pie slice.</helpHtml>
	        </property>
	        
	        <property>
	            <key>sliceVisibilityThreshold</key>
	            <name>Other threshold</name>
	            <visible>false</visible>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>The percentage value below which pie slices will be combined into an "Other" slice.</helpHtml>
	        </property>
	        	        	        
	        <property>
	            <key>is3D</key>
	            <name>3D</name>
	            <visible>false</visible>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Draws the pie chart in 3 dimensions.</helpHtml>
	        </property>
	        	        	        
	         <property>
	            <key>pieHole</key>
	            <name>Pie hole ratio</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>A percentage between 0 (no hole) and 99 (greatest hole). Other values are ignored and it does not work with 3D.</helpHtml>
	        </property>
	              
	    </properties>
	    
	    <resources>
	        <resource>
	            <type>javascriptLink</type>
	            <contents>https://www.gstatic.com/charts/loader.js</contents>
	        </resource>
	        <resource>
	            <type>javascript</type>
	            <contents>
					<![CDATA[
					
 // thanks to https://github.com/DelvarWorld/easing-utils
    
function easeOutBounce( t ) {

    const scaledTime = t / 1;

    if( scaledTime < ( 1 / 2.75 ) ) {

        return 7.5625 * scaledTime * scaledTime;

    } else if( scaledTime < ( 2 / 2.75 ) ) {

        const scaledTime2 = scaledTime - ( 1.5 / 2.75 );
        return ( 7.5625 * scaledTime2 * scaledTime2 ) + 0.75;

    } else if( scaledTime < ( 2.5 / 2.75 ) ) {

        const scaledTime2 = scaledTime - ( 2.25 / 2.75 );
        return ( 7.5625 * scaledTime2 * scaledTime2 ) + 0.9375;

    } else {

        const scaledTime2 = scaledTime - ( 2.625 / 2.75 );
        return ( 7.5625 * scaledTime2 * scaledTime2 ) + 0.984375;

    }

}
					
// global for all charts
_charts = {};
// whether charts has loaded
_chartsLoaded = false;

// function for getting chart data from our Rapid data object
function getChartData(data) {

	var dataArray = [
		data.fields
	];
	
	for (var i in data.rows) {
		dataArray.push(data.rows[i]);
	}
	
	var chartData = google.visualization.arrayToDataTable(dataArray);
	
	return chartData;
}

// function for drawing a specific chart
function drawChart(id, data) {

	// if we're not in the global collection yest, add
    if (!_charts[id]) _charts[id] = {data:data};

	if (_chartsLoaded) {
	
		var chartData = getChartData(data);
	    
	    var element = document.getElementById(id);
	    
	    var details = window[id + "details"];
	    
	    var options = {
	    	animation: {
	    		startup: true,
        		duration: 1000,
        		easing: 'out'
			},
	    	legend: {position: details.legendPosition, alignment: details.legendAlignment}
		 };
		 		 
		 if (details.left || details.top || details.width || details.height) {
		 	options.chartArea = {};
		 	if (details.left) options.chartArea.left = details.left;
		 	if (details.top) options.chartArea.top = details.top;
		 	if (details.width) options.chartArea.width = details.width;
		 	if (details.height) options.chartArea.height = details.height;
		 }
		 
		 if (details.colours && details.colours.replaceAll(" ","")) options.colors = details.colours.replaceAll(" ","").split(",");
		 	    
	    if (details.chartType == "Pie") {
	    
	    	if (details.sliceVisibilityThreshold) options.sliceVisibilityThreshold = details.sliceVisibilityThreshold / 100;
			options.pieSliceText = details.pieSliceText;
		    options.is3D = details.is3D;
		    if (details.pieHole) options.pieHole = details.pieHole / 100;
		    	    
		    var chart = new google.visualization.PieChart(element);
		    		   
		   // explode selected slice
		    google.visualization.events.addListener(chart, 'select', function (ev) {
		        var selection = chart.getSelection();
		        if (selection && selection.length > 0) {
		        	var row = selection[0].row;
		        	var slices = {};
		        	slices[row] = {offset: 0.15};
		        	options.slices = slices;
		        	google.visualization.events.addListener(chart, 'ready',	function() {
		        		chart.setSelection(selection);
					});
		        	chart.draw(chartData, options);
		        }
		      });
		      
		      // slice animation
		      var counter = 0;
		      var handler = setInterval( function(){
		        var i = (1 - easeOutBounce(counter)) * 0.5;
		        options.slices = {};
		        for (var j = 0; j < data.rows.length; j++) {
		        	options.slices[j] = {offset: i}
		        }
		        chart.draw(chartData, options);
		        counter = counter + 0.1
		        if (counter > 1) clearInterval(handler);
		    }, 50);
		            		   
		  } else if (details.chartType == "Line") {
		  
		  	options.curveType = details.curveType ? "function" : "none";
		  
		  	var chart = new google.visualization.LineChart(element);
        	chart.draw(chartData, options);
		  			  
		  } else {
		  
		  if (details.isStacked) options.isStacked = details.isStacked;
		  		  
		  	var chart = new google.visualization.ColumnChart(element);
        	chart.draw(chartData, options);
		  
		}
		  
		// selection listener
		google.visualization.events.addListener(chart, 'select', function (ev) {
			var selection = chart.getSelection();
			if (selection && selection.length > 0) {
		    	$("#" + id).trigger("select");
			}
		});
		
		// retain chart
		_charts[id].chart = chart;
		// retain data
		_charts[id].data = data;
      
      }
	 
}

// if google and google charts are present
if (window["google"] && google.charts) {
	// load charts
	google.charts.load('current', {'packages':['corechart']});
	// draw once loaded
	google.charts.setOnLoadCallback( function() {
		// remember we have loaded
		_chartsLoaded = true;
		// draw all charts that may be waiting
		for (var id in _charts) {
			drawChart(id, _charts[id].data);
		}
	});
}

					]]>
	            </contents>
	        </resource>
	        <resource>
	            <type>css</type>
	            <contents>
.chart {
	width: 500px;
	height: 400px;
}
	            </contents>
	        </resource>
	    </resources>
	    	    	    
	    <getHtmlFunction>
	        <![CDATA[
return "<div id='" + this.id + "' class='chart" + getStyleClasses(this) + "'></canvas>";
	        ]]>
	    </getHtmlFunction>
	    
	    <rebuildJavaScript>
// get the iFrame window
var w = _pageIframe[0].contentWindow;
// get the id
var id = this.id;
// draw it - after a short delay for the library to initialise
setTimeout(function() {
	w.drawChart(id, {fields:['Task','Hours per day'], rows:[['Work',11],['Eat',2],['Commute',2],['Watch TV',1],['Sleep',7]]});
}, 100);
	    </rebuildJavaScript>
	    	    	    
	     <saveJavaScript>
	        <![CDATA[
this.object.html("");
	        ]]>
	    </saveJavaScript>
	    
	     <getDetailsFunction>
	        <![CDATA[
var details = {
	name: this.name,
	chartType: this.chartType,
	left: this.left,
	top: this.top,
	width: this.width,
	height: this.height,
	colours: this.colours,
	legendPosition: this.legendPosition,
	legendAlignment: this.legendAlignment,
	isStacked: this.isStacked,
	curveType: this.curveType,
	pieSliceText: this.pieSliceText,
	sliceVisibilityThreshold: this.sliceVisibilityThreshold,
	is3D: this.is3D,
	pieHole: this.pieHole
};
window[this.id + "details"] = details;
return details;
	        ]]>
	    </getDetailsFunction>
	    
	     <setDataJavaScript>
	        <![CDATA[
drawChart(id, data);
			]]>
	    </setDataJavaScript>
	    
	    <events>
	        <event>
	            <type>click</type>
	            <name>Click</name>
	        </event>
	        <event>
	            <type>select</type>
	            <name>Select</name>
	        </event>
	    </events>

	    <styles>
	        <style>
	            <name>Chart</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id;
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	    <initJavaScript>
	        <![CDATA[
$("#" + id).html("loading...");
	        ]]>
	    </initJavaScript>
	    
	    <runtimeProperties>
	        <runtimeProperty>
	            <type>selectedData</type>
	            <name>Selected data</name>
	            <getPropertyFunction>
	                <![CDATA[
var data = null;
var chart = _charts[id];
if (chart) {
	var selection = _charts[id].chart.getSelection();
	if (selection && selection.length > 0) {
		var chartData = _charts[id].data;
		if (chartData && chartData.fields && chartData.rows) {
			if (selection[0].column) {
				data = {
					fields:[chartData.fields[0],chartData.fields[selection[0].column],"column"],
					rows: [[chartData.rows[selection[0].row][0],chartData.rows[selection[0].row][selection[0].column],selection[0].column]]
				};
			} else {
				data = {
					fields:chartData.fields,
					rows: [[chartData.rows[selection[0].row]]]
				};
			}
			if (field) {
				for (var i in chartData.fields) {
					if (chartData.fields[i] && chartData.fields[i].toLowerCase() == field.toLowerCase()) {
						data = chartData.rows[selection[0].row][i];
						break;
					}
				}
			}
		}
	}
}
return data;
					]]>
	            </getPropertyFunction>
	        </runtimeProperty>
	    </runtimeProperties>
	        
	</control>
</controls>