<?xml version="1.0" encoding="ISO-8859-1" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2016 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>map</type>	 
	    <name>Map</name>	   
	    <image>images/map_24x24.png</image>   
	    
	    <addToNewApplications>false</addToNewApplications>
	         
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        
	        <property>
	            <key>mapType</key>
	            <name>Type</name>
	            <setConstructValueFunction>return "R";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>return [["R","Road map"],["S","Satellite image"]];</getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the type of map from road to satellite.</helpHtml>
	        </property>
	                    
	        <property>
	            <key>lat</key>
	            <name>Centre latitude</name>
	            <setConstructValueFunction>return 51.50722;</setConstructValueFunction>
	            <changeValueJavaScript>mapLatLng</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the latitude position.</helpHtml>
	        </property>
	        
	        <property>
	            <key>lng</key>
	            <name>Centre longitude</name>
	            <setConstructValueFunction>return -0.12750;</setConstructValueFunction>
	            <changeValueJavaScript>mapLatLng</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the longitude position.</helpHtml>
	        </property>
	        
	        <property>
	            <key>zoom</key>
	            <name>Zoom</name>
	            <setConstructValueFunction>return 8;</setConstructValueFunction>
	            <changeValueJavaScript>mapZoom</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the initial zoom level of the map. The higher the number the stronger the zoom. Caps at 21.</helpHtml>
	        </property>
	        
	        <property>
	            <key>markerImage</key>
	            <name>Marker image</name>
	            <setConstructValueFunction>return ""</setConstructValueFunction>
	            <changeValueJavaScript>imageFile</changeValueJavaScript>
	            <helpHtml>Allows you to set a customised marker on the map.</helpHtml>
	        </property>
	        
	        <property>
	            <key>showStreetView</key>
	            <name>Show street view control</name>
	            <setConstructValueFunction>return false;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Enables users to access street view on the map.</helpHtml>
	        </property>
	        
	        <property>
	            <key>showZoom</key>
	            <name>Show zoom control</name>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Allows users to set their own level of zoom.</helpHtml>
	        </property>
	        
	        <property>
	            <key>showMapType</key>
	            <name>Show map type control</name>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Allows users to swap between satellite and road map views at will.</helpHtml>
	        </property>
	        
	        <property>
	            <key>showScale</key>
	            <name>Show scale</name>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Whether an indicator for the scale of the map is shown</helpHtml>
	        </property>
	        
	        <property>
	            <key>searchFields</key>
	            <name>Address search fields</name>
	            <changeValueJavaScript>text</changeValueJavaScript>	            
	            <helpHtml>When markers are added to the map and the data object does not have lat/lng or east/north, the value in the first of these comma-seperated fields will be searched on and the marker added to the results</helpHtml>
	        </property>	
	        	        	        	        	        	        
	    </properties>
	    
	    <resources>
	        
	        <resource>
	            <type>javascriptLink</type>
	            <contents>
	                https://maps.googleapis.com/maps/api/js?v=3
	            </contents>
	        </resource>
	        
	        <resource>
	            <type>javascriptFile</type>
	            <contents>
	               scripts/controls/map.js
	            </contents>
	        </resource>
	        
	        <resource>
	            <type>css</type>
	            <contents>
	                <![CDATA[
.map {
	width: 300px;
	height: 300px;
	text-align: center;	
}	                
	                ]]>
	            </contents>
	        </resource>
	        	        
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[	      
return "<div id='" + this.id + "' style='width:" + this.width + ";height:" + this.height + "' class='map" + getStyleClasses(this) + "'>Map not available</div>"
	        ]]>
	    </getHtmlFunction> 
	    	    	    	    	    	    	    	    	    
	    <rebuildJavaScript>
	        <![CDATA[        
        
// get a reference to the iFrame window
var w = _pageIframe[0].contentWindow;     

// turn the zoom into a number
var zoom = parseInt(this.zoom);

// get a reference to the google object loaded in the iFrame
var google = w.google;

// check we got google and maps
if (google && google.maps) {

	// assume we want a roadmap
	var mapTypeId =  google.maps.MapTypeId.ROADMAP;
	
	// update if one provided
	switch (this.mapType) {
		case ("R") :
			mapTypeId =  google.maps.MapTypeId.ROADMAP;
		break;
		case ("S") :
			mapTypeId =  google.maps.MapTypeId.SATELLITE;
		break;
	} 
	
	// create a map in our control object
	var map = new google.maps.Map(this.object[0], {
	   	zoom: zoom,
		center: new google.maps.LatLng(this.lat, this.lng),
		mapTypeControlOptions: {mapTypeIds:[google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.SATELLITE]},
		mapTypeId: mapTypeId,
		mapTypeControl: this.showMapType,
		zoomControl: this.showZoom,	   	
	   	panControl: this.showPan,
	   	streetViewControl: this.showStreetView,
	   	scaleControl: this.showScale
	});
	
	// add it to the collections
	w._maps[this.id] = map;       
	
	// turn off the labels for all points of interest
	map.setOptions({'styles':[{featureType:"poi",elementType: "labels",stylers:[{visibility:"off"}]}]});
	
} // got google and google.maps
        
	        ]]>
	    </rebuildJavaScript>
	    
	    <initDesignJavaScript>
	        <![CDATA[
// rebuild the map after a small delay so all tiles are present	        
var control = this;	        
setTimeout( function() {
    rebuildHtml(control);
}, 500);	        
	        ]]>
	    </initDesignJavaScript>
	    	    
	    <saveJavaScript>
	        <![CDATA[ 
// remove any objects google as put in our div	        
this.object.html("Map not available");       
	        ]]>
	    </saveJavaScript>
	    
	    <getDetailsFunction>
	        <![CDATA[
// look for any actions on the markerClick event	        
var markerClickFunction = null;	        
if (this.events && this.events.length > 0) {
	for (var i in this.events) {
		var event = this.events[i];
		if (event.type == "markerClick") {
			if (event.actions && event.actions.length > 0) {
				markerClickFunction = "Event_markerClick_" + this.id;
				break;
			}
		}
	}
}
// return the object
return {
	lat: this.lat, 
	lng: this.lng, 
	zoom: this.zoom,
	mapType: this.mapType,
	showMapType: this.showMapType,
	showZoom: this.showZoom,
	showPan: this.showPan,
	showStreetView: this.showStreetView,
	showScale: this.showScale,
	markerImage: this.markerImage,
	markerClickFunction: markerClickFunction,
	searchFields: this.searchFields
};	        
	        ]]>
	    </getDetailsFunction>	
	    
	    <events>
	        <event>
	            <type>mapClick</type>
	            <name>Click</name>	            
	        </event>
	        <event>
	            <type>dragStart</type>
	            <name>Drag start</name>	            
	        </event>
	        <event>
	            <type>dragEnd</type>
	            <name>Drag end</name>	            
	        </event>
	        <event>
	            <type>markerClick</type>
	            <name>Marker click</name>	            
	        </event>	        
	    </events>
	      	    
	    <styles>
	        <style>
	            <name>Map</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	    <initJavaScript>
	        <![CDATA[

// if google has loaded - might not if offline
if (window["google"]) {

	// make the zoom a number
	var zoom = parseInt(details.zoom);	 
	
	// assume we want a roadmap
	var mapTypeId =  google.maps.MapTypeId.ROADMAP;
	
	// update if one provided
	switch (details.mapType) {
		case ("R") :
			mapTypeId =  google.maps.MapTypeId.ROADMAP;
		break;
		case ("S") :
			mapTypeId =  google.maps.MapTypeId.SATELLITE;
		break;
	} 
	
	// create a map in our control object
	var map = new google.maps.Map($("#" + id)[0], {
	   	zoom: zoom,
		center: new google.maps.LatLng(details.lat, details.lng),
		mapTypeControlOptions: {mapTypeIds:[google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.SATELLITE]},
		mapTypeId: mapTypeId,
		mapTypeControl: details.showMapType,
		zoomControl: details.showZoom,	   	
	   	panControl: details.showPan,
	   	streetViewControl: details.showStreetView,
	   	scaleControl: details.showScale
	});
	
	// add it to the collections
	_maps[id] = map;
	
	// turn off the labels for all points of interest
	map.setOptions({'styles':[{featureType:"poi",elementType: "labels",stylers:[{visibility:"off"}]}]});
	
	// get any map click event listener
	var f_click = window["Event_mapClick_" + id];
	// if there is a map click event listner
	if (f_click) {
		// attach a listener to the mapClick event
		google.maps.event.addListener(map, 'click', function() {
			// fire mapClick event
    		f_click($.Event("mapClick"));
		});
	}
	
	// get any map drag start event listener
	var f_dragStart = window["Event_dragStart_" + id];
	// if there is a map drag event listener
	if (f_dragStart) {
		// attach a listener to the dragstart event
		google.maps.event.addListener(map, 'dragstart', function() {
			// fire touch event
    		f_dragStart($.Event("drag"));
		});
	}
	
	// get any map drag end event listener
	var f_dragEnd = window["Event_dragEnd_" + id];
	// if there is a map drag event listener
	if (f_dragEnd) {
		// attach a listener to the dragstart event
		google.maps.event.addListener(map, 'dragend', function() {
			// fire touch event
    		f_dragEnd($.Event("drag"));
		});
	}
	
} else {

	$("#" + id).html("Map not available");

}	
	        
	        ]]>	        
	    </initJavaScript>	    
	    
	    <runtimeProperties>
	        
	        <runtimeProperty>
	            <type>mapCentre</type>
	            <name>Map centre</name>
	            <getPropertyFunction>
	                <![CDATA[
// make the data object
var data = {fields:["lat","lng"],rows:[[]]};
// get the map
var map = _maps[id];
// if there was a map
if (map) {
	// get the centre
	var centre = map.getCenter();
	// add lat to the data object
	data.rows[0].push(centre.lat());
	// add lng to the data object
	data.rows[0].push(centre.lng());	
}
// return what we got
return data;
	                ]]>
	            </getPropertyFunction>
	            <setPropertyJavaScript>
	                <![CDATA[
// get the map
var map = _maps[id];
// get the data object
var data = makeDataObject(data, field);
// get the position for the first row
var pos = getMapPosition(data, 0, setMapCentre, map);
// if we got a map and data
if (map && pos && pos.lat && pos.lng) {
	setMapCentre(map, pos);
}	                
					]]>
	            </setPropertyJavaScript>
	        </runtimeProperty>
	        
	        <runtimeProperty>
	            <type>addMarkers</type>
	            <name>Add markers</name>
	            <setPropertyJavaScript>
	                <![CDATA[
// get the map
var map = _maps[id];
// get the data object
var data = makeDataObject(data, field);
// if we got a map and data
if (map && data && data.rows && data.rows.length > 0) {
	// create a markers array if there isn't one
	if (!map.markers) map.markers = [];
	// add the markers
	addMapMarkers(map, data, details);
}	                
					]]>
	            </setPropertyJavaScript>
	        </runtimeProperty>
	        
	        <runtimeProperty>
	            <type>replaceMarkers</type>
	            <name>Replace markers</name>
	            <setPropertyJavaScript>
	                <![CDATA[
// get the map
var map = _maps[id];
// redraw the map in case it was hidden (this will mean the centre hasn't been set correctly but the zoomExtents for the markers will fix this)
google.maps.event.trigger(map, "resize");
// get the data object
var data = makeDataObject(data, field);
// if there are any current markers
if (map.markers) {
	// loop them
	for (var i in map.markers) {
		map.markers[i].setMap(null);
	}
} 
// empty markers array
map.markers = [];
// if we got a map and data
if (map && data && data.rows && data.rows.length > 0) {		
	// add the markers, and zoom their extents and centre the map once all markers are resolved
	addMapMarkers(map, data, details, data.rows.length - 1);
}	                
					]]>
	            </setPropertyJavaScript>
	        </runtimeProperty>
	        
	        <runtimeProperty>
	            <type>selectedMarker</type>
	            <name>Selected marker</name>
	            <getPropertyFunction>
	                <![CDATA[
// get the map
var map = _maps[id];
// get the selectedIndex
var selectedIndex = map.markerSelectedIndex;
// if we got a map and data
if (map && selectedIndex > -1 && map.markers.length > selectedIndex) {
	var marker = map.markers[selectedIndex];
	var data = marker.data;
	if (field) {
		var fieldIndex = -1;
		for (var i in data.fields) {
			if (field == data.fields[i]) {
				return data.rows[0][i];
			}
		}	
		return null;
	} else {
		return data;
	}	
} else {
	return null;
}	                
					]]>
	            </getPropertyFunction>
	        </runtimeProperty>
	        
	    </runtimeProperties>
       	    
	</control>
</controls>