<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2016 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->
 
 	<control>
	    
	    <type>table</type>
	    <name>Table</name>
	    <image>images/table_24x24.png</image>
	    <helpHtml>The table control allows you to enter data or controls into each cell. Options for setting the cell column span and row span are also available. The table control is split into rows and cells, contained within a parent table object. Each one can have a name given to it, however only the cell has text, and spans for columns and rows..</helpHtml>
	    
	    <dependentTypes>
	        <dependentType>tableCell</dependentType>
	        <dependentType>tableRow</dependentType>
	    </dependentTypes>
	    	    
	   	<addToNewApplications>true</addToNewApplications>
	   	
	    <noDefaultName>true</noDefaultName>
	    
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    
	    <properties>
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	    </properties>
	    	    
		<getHtmlFunction>
	        <![CDATA[
// return the html for adding to our parent object
return "<table id='" + this.id + "' class='table" + getStyleClasses(this) + "'><tbody></tbody></table>";
	        ]]>
	    </getHtmlFunction>
	    
	    <constructJavaScript>
	        <![CDATA[
this.childControls = new Array();
this.childControls.push(new Control("tableRow", this));
this.childControls.push(new Control("tableRow", this));
	        ]]>
	    </constructJavaScript>
	    	    	    	    	    	    
	    <initDesignJavaScript>
	        <![CDATA[
	                   	           
$("#dialogues").append("<img id='" + this.id + "_addRow' class='tableEditImage' src='images/addDown_16x16.png' style='z-index:10004;position:absolute' />");
var addRow = $("#" + this.id + "_addRow");
addRow.mousedown( this, function(ev) {
	addUndo();
	var control = ev.data;
	var row = new Control("tableRow", control);
	control.childControls.push(row);
});
addRow.hide();

$("#dialogues").append("<img id='" + this.id + "_addCol' class='tableEditImage' src='images/addRight_16x16.png' style='z-index:10004;position:absolute' />");
var addCol = $("#" + this.id + "_addCol");
addCol.mousedown( this, function(ev) {
	addUndo();
	var control = ev.data;
	for (var i in control.childControls) {
		var row = control.childControls[i];
		row.childControls.push(new Control("tableCell", row));
	}
});
addCol.hide();

this.object.mouseover( this, function(ev) {
	if (_selectedControl) {
		var control = ev.data;
		if (_selectedControl.type == "table" && _selectedControl.id == control.id && control.object.is(":visible")) {
			var b = $("#selectionBorder");
			var os = b.offset();
			$("#" + control.id + "_addRow").css({
				top : os.top + b.height() - 8,
				left : os.left + b.width()/2
			}).show();
			$("#" + control.id + "_addCol").css({
				top : os.top + b.height()/2,
				left : os.left + b.width() - 8
			}).show();
		} else {
			$("#" + control.id + "_addRow").hide();
			$("#" + control.id + "_addCol").hide();
		}
	}
});

this.object.mouseout( this, function(ev, evInner) {
    if (!$(evInner.toElement).is("img.tableEditImage")) {
		var control = ev.data;
		$("#" + control.id + "_addRow").hide();
		$("#" + control.id + "_addCol").hide();
	}
});
	        ]]>
	    </initDesignJavaScript>
	    
	    <styles>
	        <style>
	            <name>Table</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id;
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Rows</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " tr";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Cells</name>
	            <getAppliesToFunction>
					<![CDATA[
return "#" + this.id + " td";
	       			 ]]>
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    	    
	</control>

	<control>
	    
	    <type>tableRow</type>
	    <name>Table row</name>
	     
	    <noDefaultName>true</noDefaultName>
	    
	    <canUserAddPeers>true</canUserAddPeers>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	                   
	    </properties>
	    
	    <getHtmlFunction>
	        <![CDATA[
// return the html for adding to our parent object  
return "<tr id='" + this.id + "' class='tableRow" + getStyleClasses(this) + "'></tr>";
	        ]]>
	    </getHtmlFunction>   	
	    
	    <createJavaScript>
	        <![CDATA[
// set this object to the tr (which is under the tbody)
this.object = this._parent.object.children().last().children().last();
	        ]]>
	    </createJavaScript> 
	        
	    <constructJavaScript>
	        <![CDATA[
// make an array to hold the cells in this row	        
this.childControls = new Array();
// check if the table object already has rows
if (this._parent.childControls.length > 0) {
	// if so make cells in this row for as many cells as there are in the bottom row
	var cells =  this._parent.childControls[ Math.max(this._parent.childControls.length - 1,0)].childControls.length;
	for (var i = 0; i < cells; i++) {
		this.childControls.push(new Control("tableCell", this));
	}
} else {	       
	// otherwise just add two cells
	this.childControls.push(new Control("tableCell", this));
	this.childControls.push(new Control("tableCell", this));
}
	        ]]>
	    </constructJavaScript> 
	    
	    <appendJavaScript>
	        <![CDATA[        
// this makes sure the row is added to the tbody
this._parent.object.children().last().append(this._html);
	        ]]>
	    </appendJavaScript> 
	    
	    <styles>
	        <style>
	            <name>Table row</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	</control>
	
	<control>
	    
	    <type>tableCell</type>
	    <name>Table cell</name>
	    	    
	    <noDefaultName>true</noDefaultName>
	    	    
	    <canUserInsert>true</canUserInsert>
	    <canUserAddPeers>true</canUserAddPeers>
	    
	    <properties>
	             
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	                    
	        <property>
	            <key>text</key>
	            <name>Text</name>
	            <setConstructValueFunction>
	                <![CDATA[
	                	return "";
	                ]]>
	            </setConstructValueFunction>
	            <changeValueJavaScript>bigtext</changeValueJavaScript>	
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the title of the table cell.</helpHtml>
	        </property>
	        
	        <property>
	            <key>colSpan</key>
	            <name>Column span</name>
	            <setConstructValueFunction>return "1";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
var values=[];
var maxCols = 1;
// loop the rows in this table
for (var i in this._parent._parent.childControls) {
	// increase the maxCols if greater
	if (this._parent._parent.childControls[i].childControls.length > maxCols) maxCols = this._parent._parent.childControls[i].childControls.length;
}
// add an entry up to the maxCols
for (var i = 1; i < maxCols; i++) values.push(i);
values.push(i);
return values;
					]]>
				</getValuesFunction>
				<refreshHtml>true</refreshHtml>
				<helpHtml>Sets the width of the cell, enabling it to span multiple rows.</helpHtml>
	        </property>
	        
	        <property>
	            <key>rowSpan</key>
	            <name>Row span</name>
	            <setConstructValueFunction>return "1";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
var values=[];
// loop the rows in the table
for (var i = 1; i <= this._parent._parent.childControls.length; i++) values.push(i);
return values;
					]]>
				</getValuesFunction>
				<refreshHtml>true</refreshHtml>
				<helpHtml>Sets the length of the cell, enabling it to span multiple columns.</helpHtml>
	        </property>
	        
	    </properties>
	    	    
	    <getHtmlFunction>
	        <![CDATA[
// return the html for adding to our parent object       
return "<td id='" + this.id + "' " + ((!isNaN(this.colSpan) && this.colSpan > 1) ? "colspan='" + this.colSpan + "'" : "") + " " + ((!isNaN(this.rowSpan) && this.rowSpan > 1) ? "rowspan='" + this.rowSpan + "'" : "") + " class='tabelCell" + getStyleClasses(this) + "'" + (this.text ? "" : " style='min-width:15px;height:15px;'") + ">" + this.text + "</td>";
	        ]]>
	    </getHtmlFunction>  	
	    
	    <saveJavaScript>
	        <![CDATA[
// get the style attribute 	        
var style = this.object.attr("style");
// if the min-width:15px;height:15px; is present but there are children
if (style && style.indexOf("min-width:15px;height:15px;") > -1 && this.childControls && this.childControls.length > 0) {
	// remove the min-height
	style = style.replace("min-width:15px;height:15px;","");
	// if there are other attributes
	if (style) {
		// update changed style
		this.object.attr("style",style );
	} else {
		// remove empty style
		this.object.removeAttr("style");
	}
}	        
	        ]]>
	    </saveJavaScript>	    
	    
	    <styles>
	        <style>
	            <name>Table cell</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    	    
	</control>
	
</controls>	