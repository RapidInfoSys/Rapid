<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2018 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->
	
	<control>
	    
	    <type>tabGroup</type>	    
	    <name>Tabs</name>	    
	    <image>images/tabs_24x24.png</image>
	    <helpHtml>The tabs control provides a number of panels arranged on top of each other. The user selects which is visible by selecting from a tab at the top, or side.</helpHtml>
	    
	    <dependentTypes>
	        <dependentType>tabPanel</dependentType>
	    </dependentTypes>
	    
	    <addToNewDesktopApplications>true</addToNewDesktopApplications>
	    <addToNewResponsiveApplications>false</addToNewResponsiveApplications>
	    
		<noDefaultName>true</noDefaultName>
			    	    	    	    
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>	
	        
	        <property>
	            <key>selectedPanel</key>
	            <name>Selected panel</name>
	            <setConstructValueFunction>return "1";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	        		<![CDATA[
var values = [];
for (var i = 1; i <= this.childControls.length; i++) values.push(i);
return values;
	        		]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Changes the panel that has the current focus.</helpHtml>
	        </property>
	        
	        <property>
	            <key>tabType</key>
	            <name>Direction</name>
	            <setConstructValueFunction>return "H";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [["H","Horizontal"],["V","Vertical"]];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Alters the direction of the tabs. Available tabs are on the side or on the top.</helpHtml>
	        </property>
	          
	        <property>
	            <key>roles</key>
	            <name>User roles</name>
	            <changeValueJavaScript>roles</changeValueJavaScript>
	            <helpHtml>Only allows the viewing of the page based on the type of privileges a user has.</helpHtml>
	        </property>
	        
	    </properties>
	    
	    <resources>
	        <resource>
	            <type>css</type>
	            <contents>
	                <![CDATA[	                
ul.tabsHeader {
	list-style: none;
	padding: 0;
	margin: 0;
	vertical-align:top;
}
   
.tabsHeader li {
	border: 1px solid #bbb;
	border-top-left-radius: 5px;
	border-top-right-radius: 5px;
	margin: 0;
	text-decoration: none;
	display: block;
	background: #eee;
	color: #00c;
	width: 8em;
	text-align: center;
	cursor: pointer;
}

.tabsHeader li:hover {
	background: #ddf;
}

.tabsHeader li.selected {
	border-color: black;
	position: relative;	
	background: white;
	color: black;
	font-weight: bold;
	cursor: auto;
}

ul.tabsHeaderH li {
	border-bottom-width: 0;
}

ul.tabsHeaderH li.selected{
	position:relative;
	top:1px;
	z-index:1;
}

ul.tabsHeaderV li {
	border-right-width: 0;
}

ul.tabsHeaderV li.selected{
	position:relative;
	left:1px;
	z-index:1;
	margin-left: -1px;
}

div.tabsGroup {
	clear: both;
}

div.tabsPanel {
	display: none;
	min-height: 2em;
	vertical-align:top;
}

div.tabsPanel.selected {
	border: 1px solid black;
	clear: both;
	padding: 0 1em;	
}	                
	                ]]>
				</contents>
	        </resource>
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[
// return html for adding to our parent object    
this._parent.object.append("<div id='" + this.id + "' class='tabsGroup'><ul class='tabsHeader'></ul></div>");
	        ]]>
	    </getHtmlFunction>
	    
	    <constructJavaScript>
	        <![CDATA[	        
this.childControls = new Array();
this.childControls.push(new Control("tabsPanel", this));
this.childControls.push(new Control("tabsPanel", this));
	        ]]>
	    </constructJavaScript>	
	    	    
	    <rebuildJavaScript>
	        <![CDATA[        
try {	                
		
	// remove selected from all ul items
	this.object.children("ul").children("li").removeClass("selected");
	// remove selected from all tab body items
	this.object.children("div").removeClass("selected").css("display","none");
	
	// add selected to the relevant li
	this.object.children("ul").children("li:nth(" + (this.selectedPanel - 1) + ")").addClass("selected");
	// apply selected to the relevant div (note we need the second node as we are already a div)
	this.object.children("div:nth(" + (this.selectedPanel - 1) + ")").addClass("selected");
	
	// check for vertical or revert to horizontal (default)
	if (this.tabType == "V") {
		// this is table row
		this.object.css("display","table-row");
		// immediate child ul table-cell
		this.object.children("ul").css("display","table-cell").addClass("tabsHeaderV");
		// unfloat the immediate li
		this.object.children("ul").children("li").css({float:""});	
		// selected div is table-cell
		this.object.children("div.selected").css("display","table-cell");		
	} else {
		// remove any special display from container
		this.object.css("display","");
		// immediate child ul is block and add the special tabsHeaderH to avoid the line underneath the selected tab
		this.object.children("ul").css("display","block").addClass("tabsHeaderH");
		// float the immediate li
		this.object.children("ul").children("li").css({float:"left"});	
		// immediate child divs are block
		this.object.children("div.selected").css("display","block");
	}
	
	// add a click event to the object
	this.object.mousedown( {tabs: this}, function(ev) {
	
		// only if the target had the tabGroup class
		if ($(ev.target).is(".tabsGroup")) {

			// get a reference to the tabs
			var tabs = ev.data.tabs;
			
			// get a reference to the tabGroup object
			var tabGroup = $(this);
			
			// get the real mouse positions from the windows event
			var winEvent = window.event;	
						
			// loop the tab headers	
			for (var i = 0; i < tabs.childControls.length; i++) {
				// get the li
				var li = tabGroup.find("li:nth(" + i + ")");
				// get the offset
				var os = li.offset();
				// check if the mouse is over it
				if (winEvent.clientY + _window.scrollTop() < os.top + li.outerHeight() && winEvent.clientX + _window.scrollLeft() - _panelPinnedOffset > os.left && winEvent.clientX + _window.scrollLeft() - _panelPinnedOffset < os.left + li.outerWidth()) {
					// add an undo snapshot
					addUndo();
					// update selected tab
					tabs.selectedPanel = (i*1 + 1);
					// remove selected from all ul items
					tabs.object.children("ul").children("li").removeClass("selected");
					// remove selected from all tab body items and hide
					tabs.object.children("div").removeClass("selected").css("display","none");
					// add selected to the relevant li
					tabs.object.children("ul").children("li:nth(" + (tabs.selectedPanel - 1) + ")").addClass("selected");
					// apply selected to the relevant div (note we need the second node as we are already a div)
					tabs.object.children("div:nth(" + (tabs.selectedPanel - 1) + ")").addClass("selected");					
					// check the type
					if (tabs.details && tabs.details.tabType == "V") {
						// vertical if there are details that say so
						tabs.object.children("div.selected").css("display","table-cell");
					} else {
						// default to horizontal
						tabs.object.children("div.selected").css("display","block");
					}
					// update the properties
					showProperties(tabs);
					
					// size any flow layouts if function is present
					if (_pageIframeWindow[0]["sizeFlowLayouts"]) _pageIframeWindow[0]["sizeFlowLayouts"]();
					
			    	// bail
					return false;
				}
			}	
							
		}
	});
	
} catch (ex) { 
	alert("Error : " + ex);
}	
	        ]]>
	    </rebuildJavaScript>	 
	    
	    <getDetailsFunction>
	        <![CDATA[
return {tabType:this.tabType};	        
	        ]]>
	    </getDetailsFunction>
	    
	    <styles>
	        <style>
	            <name>Tabs</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>   
	        <style>
	            <name>Tabs headers</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " li";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>  
	        <style>
	            <name>Tabs selected header</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " li.selected";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style> 
	        <style>
	            <name>Tabs panels</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " div.tabsPanel";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>  
	    </styles>	
	    	    	    	    	    
	    <initJavaScript>
	        <![CDATA[

// get a reference to the tabs group
var tabs = $("#" + id);
// assume horizontal
horizontal = true;
// check for vertical
if (window[id + "details"] && window[id + "details"].tabType == "V") horizontal = false;
// apply extra class if horizontal
if (horizontal) {
	tabs.children("ul").addClass("tabsHeaderH");
} else {
	tabs.children("ul").addClass("tabsHeaderV");
}

// get the tab open group
var tabOpeners = $("#" + id).children("ul");

// for each tab opener
tabOpeners.children("li").each( function(idx) {
	
	// get the tab opener
	var tabOpener = $(this);
	// get it's id
	var tabId = tabOpener.attr("id");
	// get the tab body for the opener
	var tabBody = tabs.children("div[data-id=" + tabId + "]");
	// if there is a tab body - there might not be as role permissions may mean it's not in the page
	if (tabBody[0]) {
		// add a listener for the opener
		tabOpener.click( function(ev, index) {

			// remove selected from all tab header items
			tabs.children("ul").children("li").removeClass("selected");
			// remove selected from all tab body items and hide
			tabs.children("div").removeClass("selected").hide();
			// apply selected to the opener
			tabOpener.addClass("selected");
			// apply selected to the body
			tabBody.addClass("selected");
			// check the type and set visibility accordingly - also show to trigger any required code in children that may need to recalculate their size, i.e. grids
			if (horizontal) {
				// selected tab is display block
				tabBody.css("display","block").show();			
			} else {
				// selected tab is table cell
				tabBody.css("display","table-cell").show();
			}
		});
	} else {
		// since there is no tab body to show, remove the opener
		tabOpener.remove();
	}
});

// if no tabs are selected - select the first one - this is where role html may have removed the default selected tab
if (tabOpeners.children("li.selected").length == 0) tabOpeners.children("li").first().trigger("click");
  
	        ]]>	        	       	        
	    </initJavaScript>	
	    	    	    	    	            	    	    	        	    	    
	</control>
	
	<control>
	    
	    <type>tabsPanel</type>
	    <name>Tab panel</name>
	    <helpHtml>The tabs control is useful for displaying different windows of controls without moving onto a different page entirely. Each theme has a differently styled tabs group, and can also be personalised using CSS. Each tab panel is contained within a parent tab object.</helpHtml>
	    	    
	    <noDefaultName>true</noDefaultName>
	      	    
	    <canUserInsert>true</canUserInsert>
	    <canUserAddPeers>true</canUserAddPeers>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        
	        <property>
	            <key>label</key>
	            <name>Label</name>
	            <setConstructValueFunction>return "Tab panel"</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the title of the selected tab.</helpHtml>
	        </property>
	        
	        <property>
	            <key>roles</key>
	            <name>User roles</name>
	            <changeValueJavaScript>roles</changeValueJavaScript>
	            <helpHtml>Only allows the viewing of the page based on the type of privileges a user has.</helpHtml>
	        </property>
	        
	    </properties>
	    
	    <getHtmlFunction>
	        <![CDATA[
// return our html for adding to our parent object
return "<li id='" + this.id + "' class='tabsPanel'>" + this.label + "</li>";
	        ]]>
	    </getHtmlFunction> 

	    <createJavaScript>
	        <![CDATA[
// add a div for the panel into the tab group div (that leading space is important for creating the same gap we see at runtime)	           
this._parent.object.append("<div class='tabsPanel' data-id='" + this.id + "'></div>");
// set this object to the div
this.object = this._parent.object.children().last();
	        ]]>
	    </createJavaScript>   
  	    	    	    	    	    	    	    	   	    	   	    
	    <rebuildJavaScript>
	        <![CDATA[        
// update the label
this._parent.object.children("ul").children("li:nth(" + (this.object.index() - 1) + ")").text(this.label);
	        ]]>
	    </rebuildJavaScript>
	    	    	    	    
	    <appendJavaScript>
	        <![CDATA[   
// add the li to the ul in the tab group	             
this._parent.object.children().first().append(this._html);
	        ]]>
	    </appendJavaScript> 
	    
	    <selectLeftJavaScript>
			<![CDATA[        
// change the selected panel down one
this._parent.selectedPanel = this._parent.selectedPanel * 1 - 1;
// rebuild the parent
this._parent._rebuild();
	        ]]>	        
	    </selectLeftJavaScript>
	    
	    <selectRightJavaScript>
			<![CDATA[        
// change the selected panel up one
this._parent.selectedPanel = this._parent.selectedPanel * 1 + 1;
// rebuild the parent
this._parent._rebuild();
	        ]]>	        
	    </selectRightJavaScript>
	    
	    <swapLeftJavaScript>
			<![CDATA[        
// get the index of the tab we're dealing with
var index = this._parent.selectedPanel * 1 - 1;
// get the tab header object
var tabHeader = this._parent.object.children().first().find("li:nth(" + index + ")");
// get the tab header we're swapping with
var tabHeaderSwap = tabHeader.prev();
// swap them
tabHeader.insertBefore(tabHeaderSwap);
// get the tab body object
var tabBody = this._parent.object.children("div:nth(" + index + ")");
// get the tab body we're swapping with
var tabBodySwap = tabBody.prev();
// swap them
tabBody.insertBefore(tabBodySwap);
// change the selected panel down one
this._parent.selectedPanel = this._parent.selectedPanel * 1 - 1;
	        ]]>	        
	    </swapLeftJavaScript>
	    
	    <swapRightJavaScript>
			<![CDATA[        
// get the index of the tab we're dealing with
var index = this._parent.selectedPanel * 1 - 1;
// get the tab header object
var tabHeader = this._parent.object.children().first().find("li:nth(" + index + ")");
// get the tab header we're swapping with
var tabHeaderSwap = tabHeader.next();
// swap them
tabHeader.insertAfter(tabHeaderSwap);
// get the tab body object
var tabBody = this._parent.object.children("div:nth(" + index + ")");
// get the tab body we're swapping with
var tabBodySwap = tabBody.next();
// swap them
tabBody.insertAfter(tabBodySwap);
// change the selected panel down one
this._parent.selectedPanel = this._parent.selectedPanel * 1 + 1;
	        ]]>	        
	    </swapRightJavaScript>
	    
	    <insertLeftJavaScript>
			<![CDATA[        
// append and initDesign have already been called when the object was constructed so now we just need to move things around
var selected = this._parent.selectedPanel*1;
this._parent.childControls.splice(selected-1,0,this);
// move the li
this._parent.object.children().first().children("li:last").insertBefore(this._parent.object.children().first().children("li:nth(" + (selected - 1) + ")"));
// move the div
this.object.insertBefore(this._parent.object.children("div:nth(" + (selected - 1) + ")"));
// rebuild the parent (selection won't have changed as we're taking over as such)
this._parent._rebuild();
	        ]]>	        
	    </insertLeftJavaScript>
	    
	    <insertRightJavaScript>
			<![CDATA[        
// append and initDesign have already been called when the object was constructed so now we just need to move things around
var selected = this._parent.selectedPanel*1;
this._parent.childControls.splice(selected,0,this);
// move the li
this._parent.object.children().first().children("li:last").insertAfter(this._parent.object.children().first().children("li:nth(" + (selected - 1) + ")"));
// move the div
this.object.insertAfter(this._parent.object.children("div:nth(" + (selected - 1) + ")"));
// change the selection
this._parent.selectedPanel = selected+1;
// rebuild the parent 
this._parent._rebuild();
	        ]]>	        
	    </insertRightJavaScript>
	    
	    <removeJavaScript>
	        <![CDATA[        
// remove the html for the li
this._parent.object.children().first().children("li:nth(" + (this.object.index() - 1) + ")").remove();
// remove the div
this.object.remove();
// update the selected tab
this._parent.selectedPanel = "1";
// rebuild the parent
this._parent._rebuild();
	        ]]>
	    </removeJavaScript> 
	    
	    <events>
	        <event>
	            <type>click</type>
	            <name>Click</name>
	        </event>
	    </events>
	    	    
	    <styles>
	        <style>
	            <name>Tab header</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + ".tabsPanel";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>   
	    </styles>	    
	    	    	    	   	    	        	    
	</control>
	
</controls>	