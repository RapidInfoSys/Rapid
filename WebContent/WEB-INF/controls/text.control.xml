<?xml version="1.0" encoding="ISO-8859-1" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2016 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

    <control>
        
        <type>text</type>
        <name>Text</name>
        <image>images/text_24x24.png</image>
        <helpHtml>A simple, but vital, control that places text onto your app. The text control can be used to display a variety of details to users, such as asking them questions or directing them through your app. The text control can also attach itself to other controls in the form of the 'Label for' property. This is especially useful for validation.</helpHtml>
        
        <addToNewApplications>true</addToNewApplications>
        <noDefaultName>true</noDefaultName>
        
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	                    
	        <property>
	            <key>text</key>
	            <name>Text</name>
	            <setConstructValueFunction>return "Text"</setConstructValueFunction>
	            <changeValueJavaScript>bigtext</changeValueJavaScript>	
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the contents of the text element.</helpHtml>
	        </property>
	        
	        <property>
	            <key>format</key>
	            <name>Format</name>
	            <setConstructValueFunction>return "N";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [{"value":"N","text":"None"},{"value":"P","text":"Paragraph"},{"value":"BF","text":"Line break"},{"value":"H1","text":"Header 1"},{"value":"H2","text":"Header 2"},{"value":"H3","text":"Header 3"},{"value":"H4","text":"Header 4"},{"value":"H5","text":"Header 5"}];
					]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Enables the text to have a different type of html applied.</helpHtml>
	        </property>
	        
	        <property>
	            <key>labelFor</key>
	            <name>Label for</name>
	             <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                 <![CDATA[
	                // return the list of all controls on the page with the one for this action selected
	                return "<option value=''>Please select...</option>" + getControlOptions(this.control);
	               	]]>
	            </getValuesFunction>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Label for is used to associate a text element to any other named control on the page. This is especially useful for validation.</helpHtml>
	        </property>
	        
	    </properties>
	    
	    <getHtmlFunction>
	        <![CDATA[
// return the html for adding to our parent object	 
var text = this.text;
if (!text) text = "&nbsp;"
var open = "span";
var close = "span";       
switch (this.format) {
	case "BR" :
		open = "br><span";
	break;
	case "P" :  case "H1": case "H2": case "H3": case "H4": case "H5" : 
		open = close = this.format.toLowerCase();		
	break; 
}
var labelFor = "";
if (this.labelFor) {
	labelFor = "for='" + this.labelFor + "' ";
	if (open == "span") {
		open = "label";
		close = "label";
	} else {
		open = "label><" + open;
		close = close + "></label";
	}
}
return "<" + open + " id='" + this.id + "' " + labelFor + " class='text" + getStyleClasses(this) + "'>" + text + "</" + close + ">";
	        ]]>
	    </getHtmlFunction>  
	    
	    <saveJavaScript>
	        <![CDATA[
// empty the html if no text, no width (from a style or otherwise), and just the space-holding &nbsp;
if (!this.text && !this.object.css("Width") != "auto" && this.object.html() == "&nbsp;") this.object.html("");	        
	        ]]>	        
	    </saveJavaScript>
	    
	    <getDataFunction>
	        <![CDATA[
return $("#" + id).html();
			]]>
	    </getDataFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[
var control = $("#" + id);	        
if (data != null && data !== undefined) {	
	data = makeDataObject(data, field);
	if (data.rows && data.rows[0]) {	        		
		if (field && data.fields) {
			for (var i in data.fields) {
				if (data.fields[i] && data.fields[i].toLowerCase() == field.toLowerCase()) {
					control.html(data.rows[0][i]);
					break;
				}
			}
		} else {
			control.html(data.rows[0][0]);
		}
	} else {
		control.html("");
	}
} else {
	control.html("");
}
			]]>
	    </setDataJavaScript>
	    
	    <events>
	        <event>
	            <type>click</type>
	            <name>Click</name>
	        </event>
	        <event>
	            <type>mouseover</type>
	            <name>Mouse over</name>
	        </event>
	        <event>
	            <type>mouseout</type>
	            <name>Mouse out</name>
	        </event>	        
	    </events> 
	    
	    <styles>
	        <style>
	            <name>Text</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>  
	    </styles>
	    
    </control> 
</controls>