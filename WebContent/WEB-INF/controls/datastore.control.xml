<?xml version="1.0" encoding="ISO-8859-1" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2014 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

RapidSOA is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>dataStore</type>	 
	    <name>Data store</name>	   
	    <image>images/datastore_24x24.png</image>    
	    
	    <addToNewApplications>true</addToNewApplications>    
	    
	    <canUserAdd>true</canUserAdd>
	    <canUserAddPeers>true</canUserAddPeers>
	    <canBeUsedFromOtherPages>true</canBeUsedFromOtherPages>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>	            
	        </property>	  
	             
	        <property>
	            <key>storageType</key>
	            <name>Type</name>
	            <setConstructValueFunction>return "L";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>	
	            <getValuesFunction>
	                <![CDATA[
return [["L","Local storage"],["S","Session storage"],["P","Page storage"]];
					]]>
	            </getValuesFunction>               
	        </property>    
	        
	    </properties>
	    
	    <resources>
	        <resource>
	            <type>javascript</type>
	            <contents>
	                <![CDATA[
	                                
function getDataStoreData(id, details, field) {
	var data;
	switch (details.storageType) {
		case "L":
			// use localStorage
			if (!localStorage[_appId + "_" + id]) localStorage[_appId + "_" + id] = "{}";
			// get the data string
			var dataString = localStorage[_appId + "_" + id];
			// get data
			data = JSON.parse(dataString);				
		break;
		case "S": 
			// use sessionStorage
			if (!sessionStorage[_appId + "_" + id]) sessionStorage[_appId + "_" + id] = "{}";
			// get the data string
			var dataString = sessionStorage[_appId + "_" + id];
			// get data
			data = JSON.parse(dataString);
		break;
		case "P": 
			// instansiate an object in the page if there isn't one
			if (!window[id + "datastore"]) window[id + "datastore"] = {};
			// use the in page object
			data = window[id + "datastore"];
		break;
	}  
	// return it	
	return data;
}	                

function saveDataStoreData(id, details, data) {
	switch (details.storageType) {
		case "L":
			// use localStorage
			localStorage[_appId + "_" + id] = JSON.stringify(data);			
		break;
		case "S": 
			// use sessionStorage
			sessionStorage[_appId + "_" + id] = JSON.stringify(data);
		break;
		case "P": 
			// instansiate an object in the page if there isn't one
			window[id + "datastore"] = data;
		break;
	}
	var f = window["Event_change_" + id];
	if (f) f($.Event("change"));
}


	                ]]>
	            </contents>
	        </resource>
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[	  
// return our html 
return "<img id='" + this.id + "' class='nonVisibleControl' src='images/datastore_24x24.png'></img>"
	        ]]>
	    </getHtmlFunction> 
	    	    
	   	<getDetailsFunction>	        
	        <![CDATA[
return {type:this.type, storageType: this.storageType};
			]]>	        	        
	    </getDetailsFunction>
	    
	    <getDataFunction>
	        <![CDATA[        
var data = getDataStoreData(id, details, field);
if (data) {		
	if (data.rows && data.fields) {
		if (data.rows[0] && field) {
			for (var i in data.fields) {
				if (data.fields[i] && data.fields[i].toLowerCase() == field.toLowerCase()) {
					var value = data.rows[0][i];
					if (value !== undefined) {
						return value;
					} else {
						break;
					}					
				}
			}
			return null;
		} else {
			return data;
		}
	} else if (field && data[field]) {
		return data[field];
	} else {
		return null;
	}
}	 
return data;
			]]>
	    </getDataFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[	  
if (details.id) id = details.id;
if (data != null && data !== undefined) {
	data = makeDataObject(data, field);
	saveDataStoreData(id, details, data);
} else {
	saveDataStoreData(id, details, null);
}
			]]>
	    </setDataJavaScript>
	    
	    <events>
	        <event>
	            <type>change</type>
	            <name>Change</name>
	        </event>
	    </events>
	    
	    <runtimeProperties>
	        
	        <runtimeProperty>
	            <type>selectedRowData</type>
	            <name>Selected row data</name>
	            <getPropertyFunction>
	                <![CDATA[	                
var data = getDataStoreData(id, details);
if (data && data.selectedRowNumber && data.rows && data.rows[data.selectedRowNumber - 1]) {
	return {fields:data.fields,rows:[data.rows[data.selectedRowNumber - 1]]};
}	     	                
	                ]]>
	            </getPropertyFunction>
	            <setPropertyJavaScript>
	                <![CDATA[	
var dataStoreData = getDataStoreData(id, details);	                
if (dataStoreData && dataStoreData.selectedRowNumber) {	
	data = makeDataObject(data, field);
	if (data && data.rows) {
		dataStoreData.rows[dataStoreData.selectedRowNumber] = data.rows[0][0];
		saveDataStoreData(id, details, dataStoreData);
	}
}            
	                ]]>
	            </setPropertyJavaScript>
	        </runtimeProperty>
	        
	       	<runtimeProperty>
	            <type>selectedRowNumber</type>
	            <name>Selected row number</name>
	            <getPropertyFunction>
	                <![CDATA[
var data = getDataStoreData(id, details);
if (data) return data.selectedRowNumber;                       
	                ]]>
	            </getPropertyFunction>
	            <setPropertyJavaScript>
	                <![CDATA[	
var dataStoreData = getDataStoreData(id, details);	                
if (dataStoreData) {	
	data = makeDataObject(data, field);
	if (data && data.rows) {
		dataStoreData.selectedRowNumber = data.rows[0][0];
		saveDataStoreData(id, details, dataStoreData);
	}
}            
	                ]]>
	            </setPropertyJavaScript>
	        </runtimeProperty>
	        
	        <runtimeProperty>
	   	        <type>rowCount</type>
	   	        <name>Row count</name>
	   	        <getPropertyFunction>
			        <![CDATA[
var dataStoreData = getDataStoreData(id, details);
if (dataStoreData && dataStoreData.rows) return dataStoreData.rows.length;
			        ]]>	  	   	            
	   	        </getPropertyFunction>	   	        
	   	    </runtimeProperty>
	   	    
	        <runtimeProperty>
	            <type>append</type>
	            <name>Append data</name>
	            <setPropertyJavaScript>
	                <![CDATA[	 
var dataStoreData = getDataStoreData(id, details);
if (dataStoreData) {
	data = makeDataObject(data, field);
	if (data && data.rows) {
		if (!dataStoreData.fields) dataStoreData.fields = data.fields;
		if (!dataStoreData.rows) dataStoreData.rows = []; 
		for (var i in data.rows) dataStoreData.rows.push(data.rows[i]);
		saveDataStoreData(id, details, dataStoreData);
	}	
}               
	                ]]>
	            </setPropertyJavaScript>
	        </runtimeProperty>
	    </runtimeProperties>
	    
	    <designLinkJQuery>
	        <![CDATA[
.click( function(ev) {
	showDesignData($(this));
});	        	        
	        ]]>
	    </designLinkJQuery>
	    
	</control>
</controls>