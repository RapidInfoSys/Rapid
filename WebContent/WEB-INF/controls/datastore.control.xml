<?xml version="1.0" encoding="ISO-8859-1" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2014 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

RapidSOA is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>dataStore</type>	 
	    <name>Data store</name>	   
	    <image>images/datastore_24x24.png</image>    
	    
	    <addToNewApplications>true</addToNewApplications>    
	    
	    <canUserAdd>true</canUserAdd>
	    <canUserAddPeers>true</canUserAddPeers>
	    <canBeUsedFromOtherPages>true</canBeUsedFromOtherPages>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>	            
	        </property>	  
	             
	        <property>
	            <key>storageType</key>
	            <name>Type</name>
	            <setConstructValueFunction>return "L";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>	
	            <getValuesFunction>
	                <![CDATA[
return [["L","Local storage"],["S","Session storage"],["P","Page storage"]];
					]]>
	            </getValuesFunction>               
	        </property>    
	        
	    </properties>
	    
	    <resources>
	        <resource>
	            <type>javascript</type>
	            <contents>
	                <![CDATA[
function getDataStore(id, details) {
	var dataStore;
	switch (details.storageType) {
		case "L":
			// use localStorage
			dataStore = localStorage;
		break;
		case "S": 
			// use sessionStorage
			dataStore = sessionStorage;
		break;
		case "P": 
			// instansiate an object in the page if there isn't one
			if (!window[details.id + "datastore"]) window[details.id + "datastore"] = {};
			// use the in page object
			dataStore = window[details.id + "datastore"];
		break;
	}  
	return dataStore;
}	                
	                ]]>
	            </contents>
	        </resource>
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[	  
// return our html 
return "<img id='" + this.id + "' class='nonVisibleControl' src='images/datastore_24x24.png'></img>"
	        ]]>
	    </getHtmlFunction> 
	    
	    <saveJavaScript>
	        <![CDATA[
this.object.remove();     
	        ]]>	        	        
	    </saveJavaScript>
	    
	   	<getDetailsFunction>	        
	        <![CDATA[
return {storageType: this.storageType, merge: this.mergeData, id: this.id};
			]]>	        	        
	    </getDetailsFunction>
	    
	    <getDataFunction>
	        <![CDATA[        
var data = null;
var dataStore = getDataStore(id,details);
if (dataStore) {
	if (details.id) id = details.id;	
	var dataString = dataStore[_appId + "_" + id];
	if (dataString) {
		var data = JSON.parse(dataString);
		if (data) {		
			if (data.rows && data.fields) {
				if (data.rows[0] && field) {
					for (var i in data.fields) {
						if (data.fields[i].toLowerCase() == field.toLowerCase()) {
							return data.rows[0][i];
						}
					}
					return null;
				} else {
					return data;
				}
			} else if (field && data[field]) {
				return data[field];
			}
		}	 
	} 		
}
return data;
			]]>
	    </getDataFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[	  
var dataStore = getDataStore(id,details);
if (dataStore) {
	if (details.id) id = details.id;
	if (data != null && data !== undefined) {
		data = makeDataObject(data, field);
		dataStore[_appId + "_" + id] = JSON.stringify(data);
	} else {
		dataStore[_appId + "_" + id] = null;
	}
} 

			]]>
	    </setDataJavaScript>
	    
	    <runtimeProperties>
	   	    <runtimeProperty>
	   	        <type>selectedRowNumber</type>
	   	        <name>Selected row number</name>
	   	        <getPropertyFunction>
			        <![CDATA[
var data = null;
var dataStore = getDataStore(id,details);
if (dataStore) {
	if (details.id) id = details.id;	
	var dataString = dataStore[_appId + "_" + id];
	if (dataString) {
		var data = JSON.parse(dataString);
		if (data) {		
			return data.selectedRow;
		}	 
	} 			
}
return data;
			        ]]>	  	   	            
	   	        </getPropertyFunction>	   	        
	   	    </runtimeProperty>
	   	</runtimeProperties>
	    
	</control>
</controls>