<?xml version="1.0" encoding="ISO-8859-1" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2014 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

RapidSOA is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	
	    <type>grid</type>	
	    <name>Grid</name>	   
	    <image>images/grid_24x24.png</image>  
	    
	    <addToNewApplications>true</addToNewApplications>
	          
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>	            
	        </property>	
	                    
	        <property>
	            <key>columnHeadings</key>
	            <name>Column headings</name>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>	        
	            <refreshHtml>true</refreshHtml>    
	        </property>
	        
	        <property>
	            <key>columns</key>
	            <name>Columns</name>
	            <setConstructValueFunction>return [];</setConstructValueFunction>
	            <changeValueJavaScript>gridColumns</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>	              
	        </property>
	        
	        <property>
	            <key>dataStorageType</key>
	            <name>Data store type</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>	
	            <getValuesFunction>
	                <![CDATA[
return [["","None"],["L","Local storage"],["S","Session storage"]];
					]]>
	            </getValuesFunction>               
	        </property> 
	         
	    </properties>
	    
	    <resources>
	        <resource>
	            <type>css</type>
	            <contents>
	                <![CDATA[	                
table.grid {
	border-collapse:collapse;
}           
	                ]]>
				</contents>
	        </resource>
	        <resource>
	            <type>javascript</type>
	            <contents>
	                <![CDATA[
function getGridDataStoreData(id, details) {
	data = null;
	switch (details.dataStorageType) {
		case "L" :
			var dataString = localStorage[_appId + id];
			if (dataString) data = JSON.parse(dataString);
		break;
		case "S" :
			var dataString = sessionStorage[_appId + id];
			if (dataString) data = JSON.parse(dataString);
		break;
	}
	return data;
}

function saveGridDataStoreData(id, details, data) {
	switch (details.dataStorageType) {
		case "L" :
			localStorage[_appId + id] = JSON.stringify(data);
		break;
		case "S" :
			sessionStorage[_appId + id] = JSON.stringify(data);
		break;
	}
}	                	
	                ]]>
	            </contents>
	        </resource>
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[
// return an empty table, all the work is done in the rebuild	
return "<table id='" + this.id + "' class='grid" + getStyleClasses(this) + "'></table>";
	        ]]>
	    </getHtmlFunction> 	 
	    
	    <rebuildJavaScript>
	        <![CDATA[        
var table = this.object;
table.removeClass();
table.addClass("grid" + getStyleClasses(this));
table.children().remove();
if (this.columns.length > 0) {
	var headerHtml = "<tr" + (this.columnHeadings ? "" : " style='display:none;'") + ">";
	var rowHtml = "<tr>";
	var columnCount = 0;
	for (var i in this.columns) {
		var column = this.columns[i];
		if (column.visible) {
			headerHtml += "<td" + (column.titleStyle ? " style='" + column.titleStyle + "'" : "") + ">" + column.title + "</td>";
			if (i % 2 == 1) {
			 	rowHtml += "<td " + (column.fieldStyle ? " style='" + column.fieldStyle + "'" : "") + ">123.00</td>"
			} else {
				rowHtml += "<td" + (column.fieldStyle ? " style='" + column.fieldStyle + "'" : "") + ">Data</td>"
			}
			columnCount ++;
		} else {
			headerHtml += "<td style='display:none;'>" + column.title + "</td>";
			rowHtml += "<td style='display:none;'></td>"
		}
	}
	if (columnCount == 0) {
		headerHtml += "<td>No visible columns</td>"
		rowHtml += "<td>No visible columns</td>";
	}
	headerHtml += "</tr>";
	rowHtml += "</tr>";
	table.append(headerHtml);
	table.append(rowHtml.replace("<tr>","<tr class='rowStyle1'>"));
	table.append(rowHtml.replace("<tr>","<tr class='rowStyle2'>"));
} else {
	table.append("<tr><td>No columns</td></tr>");
}	        	        
	        ]]>
	    </rebuildJavaScript>
	    
	    <saveJavaScript>
	        <![CDATA[ 
var table = this.object;
table.children().last().children(":not(:first)").remove();	        
	        ]]>
	    </saveJavaScript>
	    
	    <getDetailsFunction>	        
	        <![CDATA[
var details = {};
if (this.columns && this.columns.length > 0) {
	details.columns = [];
	for (var i in this.columns) {
		var column = this.columns[i];
		var c = {};
		if (column.visible) c.visible = column.visible;
		if (column.field) c.field = column.field;
		if (column.fieldStyle) c.style = column.fieldStyle;		
		if (column.cellFunction) c.cellFunction = column.cellFunction;		
		details.columns.push(c);
	}
} 	        
if (this.styles && this.styles.length > 0) {
	details.rowHover = false;
	details.rowSelect = false;
	for (var i in this.styles) {
		var style = this.styles[i];
		if (style.appliesTo && style.appliesTo.indexOf("rowHover") > 0) details.rowHover = true;
		if (style.appliesTo && style.appliesTo.indexOf("rowSelect") > 0) details.rowSelect = true;
	}
}
if (this.dataStorageType) {
	this.canBeUsedFromOtherPages = true;
	details.dataStorageType = this.dataStorageType;
} else {
	this.canBeUsedFromOtherPages = false;
}
return details;
			]]>	        	        
	    </getDetailsFunction>
	    	    
	    <getDataFunction>
	        <![CDATA[
var data = null;
if (details) {
	if (details.dataStorageType) {
		data = getGridDataStoreData(id, details);
	} else if (details.columns) {
		if (field) {		
			var row = $(ev.target).closest("tr");
			var rowIndex = row.index() - 1;
			if (rowIndex >= 0) {
				for (var i in details.columns) {
					if (details.columns[i].field.toLowerCase() == field.toLowerCase()) {
						data = row.children(":nth(" + i + ")").html();
						break;
					}
				}
			}	    
		} else {
			var data = {};
			data.fields = [];		
			for (var i in details.columns) {	
				data.fields.push(details.columns[i].field);		
			}
			data.rows = [];
			$("#" + id).find("tr:not(:first)").each(function(i) {
				var row = [];
				$(this).children().each(function(i) {
					row.push($(this).html());
				});
				data.rows.push(row);
			});
		}	
	}
}
return data;

			]]>
	    </getDataFunction>	    		
	    
	    <setDataJavaScript>
	        <![CDATA[
var control = $("#" + id);
control.find("tr:not(:first)").remove();	        
if (data != null && data !== undefined) {	
	data = makeDataObject(data, field);
	if (data.rows) {	        		
		if (details && details.columns && data.fields) {
			var columnMap = [];
			for (var i in details.columns) {				
				for (var j in data.fields) {
					var found = false;
					if (details.columns[i].field) {
						if (details.columns[i].field.toLowerCase() == data.fields[j].toLowerCase()) found = true;
					} else {
						if (!data.fields[j]) found = true;
					}
					if (found) {
						columnMap.push(j);
						break;
					}
				}
				// added the column to the map
				if (columnMap.length == i) columnMap.push("");
				// if we have cellFunction JavaScript, and it hasn't been turned into a function object yet
				if (details.columns[i].cellFunction && !details.columns[i].f) details.columns[i].f = new Function(details.columns[i].cellFunction);
			}
			for (var i in data.rows) {
				var row = data.rows[i];
				var rowObject = control.append("<tr class='rowStyle" + (i % 2 + 1) + "'></tr>").find("tr:last");
				for (var j in details.columns) {
					var style = "";
					if (!details.columns[j].visible) style += "display:none;";
					if (details.columns[j].style) style += details.columns[j].style;
					if (style) style = " style='" + style + "'";
					// assume the cell has no value
					var value = "";				
					// get the position of this column in the data object
					var mappedCol = columnMap[j];
					// if we can find the column and it has data use it as the value
					if (mappedCol && row[mappedCol]) value = row[columnMap[j]];
					// add the cell with the value and return a reference
					var cellObject = rowObject.append("<td" + style + ">" + value + "</td>").find("td:last");
					// apply any cell function
					if (details.columns[j].f) details.columns[j].f.apply(cellObject,[id, data, field, details]);
				}		
				// if there is a rowValidation collection
				if (data.rowValidation && i < data.rowValidation.length) {
					if (!data.rowValidation[i]) rowObject.addClass("validation");
				}		
			}
			// if there is a selected row
			if (data.selectedRowNumber) control.find("tr:nth(" + data.selectedRowNumber + ")").addClass("rowSelect");
		} else {
			for (var i in data.rows) {
				var row = data.rows[i];
				var rowHtml = "<tr>";
				for (var j in row) {
					rowHtml += "<td>" + row[j] + "</td>";
				}
				rowHtml += "</tr>";
				control.append(rowHtml);
			}
		}	
		if (details.dataStorageType) saveGridDataStoreData(id, details, data);					
	} 
	
	control.children().last().children("tr:not(:first)").click( function() { 
		var row = $(this);
		row.parent().find("tr.rowSelect").each( function() {
			var row = $(this);
			row.removeClass("rowSelect");
		});
		row.addClass("rowSelect"); 
	});
	
}
			]]>
	    </setDataJavaScript>
	    
	    <events>
	        <event>
	            <type>click</type>
	            <name>Row click</name>
	            <filterFunction>
<![CDATA[
var target = $(ev.target);
// don't fire if the target is the top row or tbody
if (target.closest("tr").index() == 0 || target.is("tbody")) return false;
]]>	                
	            </filterFunction>
	        </event>
	    </events> 
	    
	    <styles>
	        <style>
	            <name>Grid</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Title row</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " tr:first-child";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Title cells</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " tr:first-child td";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Row cells</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " tr:not(:first-child) td";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Row style 1</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " .rowStyle1";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Row style 2</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " .rowStyle2";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Row hover</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " tr:hover:not(:first-child)";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>	 
	        <style>
	            <name>Row select</name>
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " .rowSelect";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>       
	    </styles>
	    
	    <initJavaScript>
	        <![CDATA[
if (details && details.dataStorageType) {
	var data = getGridDataStoreData(id, details);
	if (data) setData_grid($.Event('gridinit'), id, null, details, data);
	$("#" + id).click(function(ev) {
		var data = getGridDataStoreData(id, details);
		data.selectedRowNumber = $(ev.target).closest("tr").index();
		saveGridDataStoreData(id, details, data);
	});
} 
	        ]]>	        
	    </initJavaScript>
	    
	    <runtimeProperties>
	        
	        <runtimeProperty>
	   	        <type>selectedRowData</type>
	   	        <name>Selected row data</name>
	   	        <getPropertyFunction>
			        <![CDATA[
var data = null;
if (details.dataStorageType) {
	data = getGridDataStoreData(id, details);
	data.rows = [data.rows[data.selectedRowNumber - 1]];
} else {
	var row = $(ev.target).closest("tr");
	var rowNumber = row.index();
	if (rowNumber > 0) {
		data = {fields:[],rows:[[]]};
		for (var i in details.columns) {
			data.fields.push(details.columns[i].field);
			data.rows[0].push(row.children(":nth(" + i + ")").html());
		}
	}
}
return data;
			        ]]>	  	   	            
	   	        </getPropertyFunction>	   
	   	        <setPropertyJavaScript>
	   	            <![CDATA[
gridData = getGridDataStoreData(id, details);
if (!gridData) gridData = {};
data = makeDataObject(data, field);
if (gridData.selectedRowNumber) {
	// replace or remove selected row	
	if (data) {
		// get the gridData fields
		var gridDataFields = gridData.fields;
		// check there are some
		if (gridDataFields) {
			
			// set up a field map which will hold the location of the incoming fields in the grid fields
			var fieldMap = {};
			// loop the incoming fields
			for (var i in data.fields) {
				// get it's name
				var field = data.fields[i];
				// assume it wasn't found in the grid's list of fields	
				var foundField = false;							
				// loop the grid's fields
				for (var j in gridData.fields) {
					// if there's a match					
					if (field.toLowerCase() == gridData.fields[j].toLowerCase()) {
						// store it's position
						fieldMap[field] = j;
						foundField = true;
						break;
					}
				}
				// if the field wasn't found in the grid
				if (!foundField) {
					// add it to the grid's fields
					gridData.fields.push(field);
					// retain the position
					fieldMap[field] = gridData.fields.length - 1;
				}				
			}
			
			// loop the incoming fields one more time
			for (var i in data.fields) {
				// add an entry at this position if we need one
				if (gridData.rows[gridData.selectedRowNumber - 1].length < data.fields.length) gridData.rows[gridData.selectedRowNumber - 1].push(null);
				// update the selected row field from the map
				gridData.rows[gridData.selectedRowNumber - 1][fieldMap[data.fields[i]]] = data.rows[0][i];
			}
			
			
		} else {
			// take them from the incoming data object
			gridData.fields = data.fields;
			// put top row of what we were passed into selected row
			gridData.rows[gridData.selectedRowNumber - 1] = data.rows[0];
		}		
	} else {
		// remove the selected row 
		gridData.rows.splice(gridData.selectedRowNumber - 1, 1);
		// remove the validation entry if present
		if (gridData.rowValidation) gridData.rowValidation.splice(gridData.selectedRowNumber - 1, 1); 
		// remove the selection
		gridData.selectedRowNumber = null;
	}
	// save the grid
	saveGridDataStoreData(id, details, gridData);
} else {
	// append if no selected row
	if (data) {
		// create a rows array if not present
		if (!gridData.rows) gridData.rows = [];
		// look for existing fields
		if (gridData.fields) {
		
			// set up a field map which will hold the location of the incoming fields in the grid fields
			var fieldMap = {};
			// loop the incoming fields
			for (var i in data.fields) {
				// get it's name
				var field = data.fields[i];
				// assume it wasn't found in the grid's list of fields	
				var foundField = false;							
				// loop the grid's fields
				for (var j in gridData.fields) {
					// if there's a match					
					if (field.toLowerCase() == gridData.fields[j].toLowerCase()) {
						// store it's position
						fieldMap[field] = j;
						foundField = true;
						break;
					}
				}
				// if the field wasn't found in the grid
				if (!foundField) {
					// add it to the grid's fields
					gridData.fields.push(field);
					// retain the position
					fieldMap[field] = gridData.fields.length - 1;
				}				
			}
			
			// make a row
			var row = [];
			// add the cells
			while (row.length < gridData.fields.length) row.push(null);
			// loop the data fields and use the map to get the correct position
			for (var i in data.fields) {
				// get the field
				var field = data.fields[i];
				// get the position
				var pos = fieldMap[field];
				// add it to the correct place in the row
				row[pos] = data.rows[0][i];
			}
			// add the row to the gridData
			gridData.rows.push(row);
		
		} else {
			
			// assume the incomming fields		
			gridData.fields = data.fields;
			// add the top row of what we were given
			gridData.rows.push(data.rows[0]);
		
		}
		
		// set the selected row number
		gridData.selectedRowNumber = gridData.rows.length;
		// save the grid
		saveGridDataStoreData(id, details, gridData);	
	}	
}	   	            
	   	            ]]>
	   	        </setPropertyJavaScript>	        
	   	    </runtimeProperty>
	   	    
	   	    <runtimeProperty>
	   	        <type>selectedRowValidation</type>
	   	        <name>Selected row validation</name>
	   	        <getPropertyFunction>
			        <![CDATA[
if (details && details.dataStorageType) {
	var gridData = getGridDataStoreData(id, details);
	if (gridData.rowValidation && gridData.selectedRowNumber) {
		return gridData.rowValidation[gridData.selectedRowNumber - 1];
	} 
} else {
	return $(ev.target).closest("tr").index();
}
			        ]]>	  	   	            
	   	        </getPropertyFunction>	   	
	   	        <setPropertyJavaScript>
	   	            <![CDATA[
	   	            
var data = makeDataObject(data, field);
var selectedRowNumber = null;

// look for the grid on this page
var grid = $("#" + id);
// if it's present
if (grid[0]) {
	// get the selected row number
	selectedRowNumber = grid.find("tr.rowSelect").index();
	// check the incoming data for a positive
	if (data[0][0]) {
		// remove validation class from row if true
		grid.find("tr.rowSelect").removeClass("validation");
	} else {
		// add validation class to row if false
		grid.find("tr.rowSelect").addClass("validation");
	}
}
	            	   	            
if (details && details.dataStorageType) {
	// get the grid data
	gridData = getGridDataStoreData(id, details);
	// make an object if there isn't one
	if (!gridData) gridData = {};
	// if we got a row number from the grid put it into the grid now
	if (selectedRowNumber) gridData.selectedRowNumber = selectedRowNumber;
	// if there are rows and one is selected
	if (gridData.rows && gridData.selectedRowNumber) {
		// add a rowValidation collection if there isn't one
		if (!gridData.rowValidation) gridData.rowValidation = [];
		// ensure the rowValidation collection is the same size as the row collection
		while (gridData.rows.length > gridData.rowValidation) gridData.rowValidation.push(true);
		// set the validation
		gridData.rowValidation[gridData.selectedRowNumber - 1] = data.rows[0][0];
		// save the grid
		saveGridDataStoreData(id, details, gridData);
	}
} 


	   	            ]]>
	   	        </setPropertyJavaScript>		   	                
	   	    </runtimeProperty>
	   	    
	   	    <runtimeProperty>
	   	        <type>selectedRowNumber</type>
	   	        <name>Selected row number</name>
	   	        <getPropertyFunction>
			        <![CDATA[
if (details && details.dataStorageType) {
	var gridData = getGridDataStoreData(id, details);
	if (gridData && gridData.selectedRowNumber) {
		return gridData.selectedRowNumber;
	} else {
		return null;
	}
} else {
	return $(ev.target).closest("tr").index();
}
			        ]]>	  	   	            
	   	        </getPropertyFunction>	   	
	   	        <setPropertyJavaScript>
	   	            <![CDATA[
gridData = getGridDataStoreData(id, details);
if (!gridData) gridData = {fields:[],rows:[]};
data = makeDataObject(data, field);
var selectedRowNumber = null;
if (data) selectedRowNumber = data.rows[0][0];
gridData.selectedRowNumber = selectedRowNumber;	
saveGridDataStoreData(id, details, gridData);	            
	   	            ]]>
	   	        </setPropertyJavaScript>		   	                
	   	    </runtimeProperty>
	   	    
	   	    <runtimeProperty>
	   	        <type>rowCount</type>
	   	        <name>Row count</name>
	   	        <getPropertyFunction>
			        <![CDATA[
if (details && details.dataStorageType) {
	var gridData = getGridDataStoreData(id, details);
	if (gridData && gridData.rows) {
		return gridData.rows.length;
	} else {
		return 0;
	}
} else {
	return $("#" + id).find("tr").size() - 1;
}
     
			        ]]>	  	   	            
	   	        </getPropertyFunction>	   	        
	   	    </runtimeProperty>
	   	    
	   	</runtimeProperties>
	   		    
	</control>
</controls>