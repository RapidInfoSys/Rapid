<?xml version="1.0" encoding="UTF-8" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2019 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>gallery</type>
	    <name>Gallery</name>
	    <image>images/gallery.svg</image>
	    <helpHtml>Lets the user select a set of images and displays them.</helpHtml>
	    
	    <addToNewMobileApplications>true</addToNewMobileApplications>
	    
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	    	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        	            
	        <property>
	            <key>images</key>
	            <name>Images</name>
	            <setConstructValueFunction>return [{url:'images/RapidLogo_60x40.png'},{url:'images/RapidLogo_60x40.png'}]</setConstructValueFunction>
	            <changeValueJavaScript>galleryImages</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the images to be used. Each image can have its own caption. By default two Rapid logos are placed in as an example of use.</helpHtml>
	        </property>
	        
	        <property>
	            <key>emptyText</key>
	            <name>Empty text</name>
	            <setConstructValueFunction>return "No images";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Text to display when there are no images present in the gallery.</helpHtml>
	        </property>
	        
	        <property>
	            <key>onImageClick</key>
	            <name>On image click</name>
	            <setConstructValueFunction>return "preview";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
						return [["nothing","Do nothing"],["","Prompt to remove image"],["caption","Show image caption"],["preview","Show fullscreen"]];
					]]>
	            </getValuesFunction>
	            <helpHtml>What to do when an image in the gallery is clicked on..</helpHtml>
	        </property>
	        
	         <property>
	            <key>gotCaptions</key>
	            <name>Got captions</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return false;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	        </property>
	        
	    </properties>
	    
	    <resources>
	    
	    	<resource>
	    		<type>javascriptFile</type>
	    		<contents>scripts_min/jquery-ui-1.12.1.min.js</contents>
	    	</resource>
	    
	        <resource>
	            <type>css</type>
	            <contents>
	                <![CDATA[
div.gallery img {
	cursor:pointer;
}

.galleryControlButton {
	background: black;
	outline: none;
	padding: 10px;
	margin: 20px;
	border-radius: 50%;
	width: 60px;
	text-align: center;
}

.galleryControlButton i {
	font-size: 38px;
	color: white;
}

.galleryControlDirectionButton {
	background: transparent;
	outline: none;
	border: 0;
	font-size: 50px;
	margin-top: -50px;
	padding: 20px 15px;
	text-shadow: 2px 2px 4px black;
	color: white;
}

.bigGallery {
	background: #eee;
}
	                ]]>
	            </contents>
	        </resource>
	        <resource>
	            <type>javascript</type>
	            <contents>
	                <![CDATA[
var _swipeHandlers = {};
       
function Gallery_removeImage(ev, id) {
	// confirm
	if (confirm("Remove image?")) {
		// get the image
		var img = $(ev.target);
		// tell Rapid Mobile an image has been removed
		if (typeof _rapidmobile != "undefined") _rapidmobile.removeImage(id, img.attr("src")); 
		// remove it
		img.remove();
		// look for our custom imageRemoved handler for this control
		var imageRemoved = window["Event_imageRemoved_" + id];
		// fire it if we found it
		if (imageRemoved) window["Event_imageRemoved_" + id]();
	}
}    

function setNextPrevButton(currentImage, prevButton, nextButton) {
	
	prevButton.hide();
	nextButton.hide();
	
	if (currentImage.next("img").length) nextButton.show();
	
	if (currentImage.prev("img").length) prevButton.show();
	
}

function setNextPrevImgAndButton(currentImage, direction, prevButton, nextButton) {
	
	if (direction == "next") {
		
		let nextImage = currentImage.next("img");
		
		if (nextImage.length) {
			
			// Hide this image
			currentImage.hide();
			// Show the next img sibling of the given image
			nextImage.show("slide", {direction:"right"}, 500, function(){
			
				setNextPrevButton($(this), prevButton, nextButton);
				
			});
			
		} 
		
	} else {
	
		let prevImage = currentImage.prev("img");
		
		if (prevImage.length) {
			
			// Hide this image
			currentImage.hide();
			// Show the previous img sibling of the given image
			prevImage.show("slide", {direction:"left"}, 500, function(){
			
				setNextPrevButton($(this), prevButton, nextButton);
				
			});
				
		} 
	
	}
	
}        	

function Gallery_showImage(ev, id) {	

	// get the image
	var img = $(ev.target);
	// look for the big gallery div
	var gallery = $("div.bigGallery");
	// if we couldn't find one create
	if (!gallery[0]) {
		
		// Create a new gallery
		gallery = $("body").append("<div class='bigGallery'></div>").find("div.bigGallery");
		
		// Hide the big gallery
		gallery.hide();
		
		// buttons to the gallery
		var btnDelete = gallery.append("<button id ='btnDeleteImage' class='galleryControlButton' style='position:absolute; left:0;'><i class='fa fa-trash'></i></button>").find("#btnDeleteImage");
		var btnClose = gallery.append("<button id ='btnCloseGallery' class='galleryControlButton' style='position:absolute; right:0;'><i class='fa fa-times'></i></button>").find("#btnCloseGallery");		
		var btnPrev = gallery.append("<button id='btnPrev' class='galleryControlDirectionButton' style='position:absolute; left:0; top:50%;'><i class='fa fa-chevron-left'></i></button>").find("#btnPrev");
		var btnNext = gallery.append("<button id='btnNext' class='galleryControlDirectionButton' style='position:absolute; right:0; top:50%;'><i class='fa fa-chevron-right'></i></button>").find("#btnNext");
		
	
		// Add click listeners to the buttons
		btnPrev.click(function(){
		
			// Get the currently shown img object in the big gallery
			let currentImage = gallery.find("img:visible");
			// Display the previous image, and decide whether next/prev button should be shown
			setNextPrevImgAndButton(currentImage, "previous", btnPrev, btnNext);
			
		});
		
		btnNext.click(function(){
		
			// Get the currently shown img object in the big gallery
			let currentImage = gallery.find("img:visible");
			// Display the previous image, and decide whether next/prev button should be shown
			setNextPrevImgAndButton(currentImage, "next", btnPrev, btnNext);
			
		});
		
		btnClose.click(function(){
			
			// Hide the gallery
			gallery.hide();
			// Clear the images in the gallery	
			gallery.children("img").each(function() {
				// Remove this object
				$(this).remove();
			});
			
		});
		
		btnDelete.click(function(){
		
			// Loop through only the images in the gallery, and get the currently shown img object in the big gallery
			let currentImage = gallery.children("img").each(function(index, element){
				let self = $(this);
				if(self.is(":visible")) {
					// Find and delete this image in the small gallery (they have the same index)
					mainGallery.children("img").eq(index).remove();
					gallery.hide();
					return false;
				}
			});
			
		});
		
		// Include swipe actions, only if this is a mobile browser
		if(/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)){
			var direction = "left";
			var fingers = 1;
			var target = gallery;
			
			target.swipe( { swipe:function(event, direction, distance, duration, fingers, fingerData) { 
				handleSwipe(event, direction, distance, duration, fingers, fingerData, target, ev); },fingers:'all'});
		  	
		  	_swipeHandlers[target] = [];
		  	
		  	// Create the functions, that handles what should happen when there is a swipe
		  	var swipeLeftHandler = function(ev) { 
		  		btnNext.trigger("click");
		  	};
		  	
		  	var swipeRightHandler = function(ev) { 
		  		btnPrev.trigger("click");
		  	};
		  	
		  	// Add the handlers to the map
		  	_swipeHandlers[target].push({direction:"left",fingers:1,function:swipeLeftHandler});
			_swipeHandlers[target].push({direction:"right",fingers:1,function:swipeRightHandler});
		
		}
		
	}
	
	// Empty the big gallery
	// Clear the images in the gallery	
	gallery.children("img").each(function() {
		// Remove this object
		$(this).remove();
	});
	
	// Get a reference of the main gallery
	var mainGallery = img.parent();
	
	// Get all the siblings of the clicked img in the main gallery including itself, and put it in the bigGallery
    mainGallery.children().each(function(){
    	// Make a clone of this children to copy into big gallery
    	let self = $(this).clone(); 	
    	self.css({"width":"100%", "height":"100%", "object-fit":"contain", "display":"none"});
    	gallery.append(self);
    	
    	// If clicked img is this image - then show this image
    	if (img[0] === this) self.show();
    });
	
	// get the index
	var index = img.index();
	// get the details
	var details = window[id + "details"];
	// if we've got the details
	if (details && details.captions && details.captions.length > index) {					
		// show the caption
		gallery.append(details.captions[index]);
	}
	
	// Now show the gallery
	gallery.show();
	gallery.css({"position":"fixed", "top":0, "left":0, "right":0, "bottom":0});
	
	// Initialise the next/prev button - depending on whether there are more than one img in the gallery
	setNextPrevButton(img, $("#btnPrev"), $("#btnNext"));
}

	                ]]>
	            </contents>
	        </resource>
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[	   	        
var html = "<div id='" + this.id + "' class='gallery'>";
if (this.images && this.images.length > 0) {
  for (var i in this.images) {
  	var url = this.images[i].url;
  	if (url.indexOf("/") < 0) url = "applications/" + _version.id + "/" + _version.version + "/" + url
    html += "<img src='" + url + "'/>";    
  }
} else {
	html += "<span>" + this.emptyText + "</span>";
}
html += "</div>";
return html;
	        ]]>
	    </getHtmlFunction> 
	    	    	    
	    <updateChildObjects>true</updateChildObjects>
	    
	    <getDetailsFunction>
	        <![CDATA[
var details = {onImageClick: this.onImageClick, emptyText: this.emptyText};
if (this.images && this.gotCaptions) {
	details.captions = [];
	for (var i in this.images) {
		details.captions.push(this.images[i].caption);
	}
} 	        
return details;	        	   	
	   	    ]]>
	   	</getDetailsFunction>
	    	    	    
	    <getDataFunction>
	        <![CDATA[
var data = {fields:["url"],rows:[]};
var control = $("#" + id);
var images = control.children("img");
images.each( function(i) {
	var url = $(this).attr("data-filename");
	if (!url) url = $(this).attr("src");
	data.rows.push([url]);
});
return data;
			]]>
	    </getDataFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[
// get the control	        
var control = $("#" + id);
// check we have some data       
if (data == null || data === undefined) {
	// no data so remove all images
	control.find("img").remove();
} else {
	// make a proper data object	
	data = makeDataObject(data, field);
	// if it has rows
	if (data.rows) {	
		// assume image not set
		var imageSet = false;
		// look for url or urls in the fields or use the first column if not found	
		var urlIndex = 0;
		if (data.fields) {
			for (var i in data.fields) {
				if (data.fields[i] == "url" || data.fields[i] == "urls") {
					urlIndex = i;
					break;
				}
			}
		}			
		// loop the rows
		for (var i in data.rows) {
			// make sure there is something to set
			if (data.rows[i][urlIndex]) {
				
				// get the urls
				var urls = data.rows[i][urlIndex];
				
				// if urls do not start with data allow comma seperated list of urls in single field too
				if (urls.indexOf("data:") == 0) {
					urls = [urls];
				} else {
					urls = data.rows[i][urlIndex].split(",");
				}
				
				// loop the urls
				for (var j in urls) {
				
					// get the url
					var url = urls[j];
					
					// if it doesn't start with http or data add the sudo start for Rapid Mobile
					if (url.indexOf("http") != 0 && url.indexOf("data:") != 0) url = "http://images/" + url;
					
					// assume no filename attribute required
					var fileNameAttr = "";
					var dataString = "data:";
					// if this url is data, make a filename
					if (url.indexOf("data:") == 0) {
						// Split the data and base64 byte payload part
						var urlParts = url.split(",");
						// Further split the data part
						var dataParts = urlParts[0].split(";");
						// Obtain the file extension from the dataPart
						var fileExtension = dataParts[0].substring("data:image/".length);
						// Get the current date
						var date = new Date();
						var dateString = date.getFullYear() + "" + (date.getMonth() + 1) + "" + date.getDate() + "_" + date.getHours() + "" + date.getMinutes() + "" + date.getSeconds() + "" + date.getMilliseconds();
						
						fileNameAttr = " data-filename='" + dateString + "." + fileExtension + "'";
					}
					
					// add an image element with the url
					control.append("<img src='" + url  + "'" + fileNameAttr + "></img>");

					// remember we set an image in the gallery
					imageSet = true;
					// find the image element and add a click handler
					control.find("img").last().click( function(ev) {
						if (details) {
							if (details.onImageClick == "preview") {
								Gallery_showImage(ev,id);
							} else if (details.onImageClick == "caption") {
								var index = $(ev.target).index();
								if (details.captions && details.captions[index]) alert(details.captions[index]);
							} else if (details.onImageClick != "nothing") {
								Gallery_removeImage(ev, id);			
							}
						} else {
							Gallery_removeImage(ev, id);
						}				
					});
					// look for our custom imageAddedEvent handler for this control
					var imageAdded = window["Event_imageAdded_" + id];
					// fire it if we found it
					if (imageAdded) window["Event_imageAdded_" + id]();
				}
			}
		}
		// remove the no pictures message if set
		if (imageSet) control.find("span").remove();
	} 
}
	        ]]>
	    </setDataJavaScript>
	    
	    <events>
	        <event>
	            <type>imageAdded</type>
	            <name>Imaged added</name>
	        </event>
	        <event>
	            <type>imageRemoved</type>
	            <name>Image removed</name>
	        </event>
	    </events>
	    
	    <styles>
	        <style>
	            <name>Gallery</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Images</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " img";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	   	<initJavaScript>
	        <![CDATA[
$("#" + id).children("img").click( function(ev) {
	var details = window[id + "details"];
	if (details) {
		// changes here need to be replicated in setData
		if (details.onImageClick == "preview") {
			Gallery_showImage(ev,id);
		} else if (details.onImageClick == "caption") {
			var index = $(ev.target).index();
			if (details.captions && details.captions[index]) alert(details.captions[index]);
		} else if (details.onImageClick != "nothing") {
			Gallery_removeImage(ev, id);			
		}
	}		
});	        
	        ]]>	        	       	        
	    </initJavaScript>
	    
	   	<runtimeProperties>
	   	    <runtimeProperty>
	   	        <type>imageCount</type>
	   	        <name>Image count</name>
	   	        <getPropertyFunction>
			        <![CDATA[
return $("#" + id).children("img").length;     
			        ]]>	  	   	            
	   	        </getPropertyFunction>
	   	    </runtimeProperty>
	   	    <runtimeProperty>
	   	        <type>urls</type>
	   	        <name>Urls</name>
	   	        <getPropertyFunction>
			        <![CDATA[
var urls = "";
var control = $("#" + id);
var images = control.children("img");
images.each( function(i) {
	var url = $(this).attr("src");
	if (url) {
		urls += url.replace("http://cache/","").replace("http://images/","");
		if (i < images.length - 1) urls += ",";
	}
});
if (urls) {
	return urls;
} else {
	return null;
}    
			        ]]>	  	   	            
	   	        </getPropertyFunction>
	   	    </runtimeProperty>
	   	</runtimeProperties>
	    	    
	</control>
</controls>