<?xml version="1.0" encoding="ISO-8859-1" ?>
<controls xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/control.xsd">

<!-- 

Copyright (C) 2016 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

	<control>
	    
	    <type>gallery</type>
	    <name>Gallery</name>
	    <image>images/gallery_24x24.png</image>
	    <helpHtml>A simple control that can display multiple images at the same time. Works most effectively when using Rapid Mobile in conjunction with the mobile action. An example of how to use the two would be to display images taken from the camera and upload them.</helpHtml>
	    
	    <addToNewMobileApplications>true</addToNewMobileApplications>
	    
	    <canUserAdd>true</canUserAdd>
	    <canUserMove>true</canUserMove>
	    <canUserAddPeers>true</canUserAddPeers>
	    	    
	    <properties>
	        
	        <property>
	            <key>name</key>
	            <name>Name</name>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Name that can be given to the control. Names are used to help identify controls uniquely.</helpHtml>
	        </property>
	        	            
	        <property>
	            <key>images</key>
	            <name>Images</name>
	            <setConstructValueFunction>return [{url:'images/RapidLogo_60x40.png'},{url:'images/RapidLogo_60x40.png'}]</setConstructValueFunction>
	            <changeValueJavaScript>galleryImages</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Sets the images to be used. Each image can have its own caption. By default two Rapid logos are placed in as an example of use.</helpHtml>
	        </property>
	        
	        <property>
	            <key>emptyText</key>
	            <name>Empty text</name>
	            <setConstructValueFunction>return "No images";</setConstructValueFunction>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <refreshHtml>true</refreshHtml>
	            <helpHtml>Text to display when there are no images present in the gallery.</helpHtml>
	        </property>
	        
	        <property>
	            <key>onImageClick</key>
	            <name>On image click</name>
	            <setConstructValueFunction>return "";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
						return [["nothing","Do nothing"],["","Prompt to remove image"],["caption","Show image caption"]];
					]]>
	            </getValuesFunction>
	            <helpHtml>Sets a small click event for when an image in the gallery is clicked on.</helpHtml>
	        </property>
	        
	         <property>
	            <key>gotCaptions</key>
	            <name>Got captions</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return false;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	        </property>
	        
	    </properties>
	    
	    <resources>
	        <resource>
	            <type>css</type>
	            <contents>
	                <![CDATA[
div.gallery img {
	cursor:pointer;
}	          
 
	                ]]>
	            </contents>
	        </resource>
	        <resource>
	            <type>javascript</type>
	            <contents>
	                <![CDATA[
	                
function Gallery_removeImage(ev, id) {
	// confirm
	if (confirm("Remove image?")) {
		// get the image
		var img = $(ev.target);
		// tell Rapid Mobile an image has been removed
		if (typeof _rapidmobile != "undefined") _rapidmobile.removeImage(id, img.attr("src")); 
		// remove it
		img.remove();
		// look for our custom imageRemoved handler for this control
		var imageRemoved = window["Event_imageRemoved_" + id];
		// fire it if we found it
		if (imageRemoved) window["Event_imageRemoved_" + id]();
	}
}              	

function Gallery_showImage(ev, id) {	
	// look for the big gallery div
	var gallery = $("div.bigGallery");
	// if we couldn't find one add, and 
	if (!gallery[0]) gallery = $("body").append("<div class='bigGallery'></div>").find("div.bigGallery");
	// hide the gallery
	gallery.hide();
	// get the image
	var img = $(ev.target);
	// add the image to the gallery
	gallery.html("<img src='" + img.attr("src") + "'/>");
	// get the index
	var index = img.index();
	// get the details
	var details = window[id + "details"];	
	// if we've got the details
	if (details) {					
	// show the caption
	gallery.append(details.captions[index]);
	}
}      

	                ]]>
	            </contents>
	        </resource>
	    </resources>
	    
	    <getHtmlFunction>
	        <![CDATA[	   	        
var html = "<div id='" + this.id + "' class='gallery'>";
if (this.images && this.images.length > 0) {
  for (var i in this.images) {
  	var url = this.images[i].url;
  	if (url.indexOf("/") < 0) url = "applications/" + _version.id + "/" + _version.version + "/" + url
    html += "<img src='" + url + "'/>";    
  }
} else {
	html += "<span>" + this.emptyText + "</span>";
}
html += "</div>";
return html;
	        ]]>
	    </getHtmlFunction> 
	    	    	    
	    <updateChildObjects>true</updateChildObjects>
	    
	    <getDetailsFunction>
	        <![CDATA[
var details = {onImageClick: this.onImageClick};
if (this.images && this.gotCaptions) {
	details.captions = [];
	for (var i in this.images) {
		details.captions.push(this.images[i].caption);
	}
} 	        
return details;	        	   	
	   	    ]]>
	   	</getDetailsFunction>
	    	    	    
	    <getDataFunction>
	        <![CDATA[
var data = {fields:["url"],rows:[]};
var control = $("#" + id);
var images = control.children("img");
images.each( function(i) {
	var url = $(this).attr("src");
	data.rows.push([url]);
});
return data;
			]]>
	    </getDataFunction>
	    
	    <setDataJavaScript>
	        <![CDATA[       
if (data != null && data !== undefined) {
	var control = $("#" + id);
	data = makeDataObject(data, field);
	if (data.rows) {	
		// assume image not set
		var imageSet = false;
		// look for url or urls in the fields or use the first column if not found	
		var urlIndex = 0;
		if (data.fields) {
			for (var i in data.fields) {
				if (data.fields[i] == "url" || data.fields[i] == "urls") {
					urlIndex = i;
					break;
				}
			}
		}			
		// loop the rows
		for (var i in data.rows) {
			// make sure there is something to set
			if (data.rows[i][urlIndex]) {
				// allow comma seperated list of urls in single field too
				var urls = data.rows[i][urlIndex].split(",");
				// loop the urls
				for (var j in urls) {
					// get the url
					var url = urls[j];
					// if it doesn't start with http add the sudo start for Rapid Mobile
					if (url.indexOf("http") != 0) url = "http://images/" + url;
					// add an image element with the url
					control.append("<img src='" + url  + "'></img>");
					// remember we set an image in the gallery
					imageSet = true;
					// find the image element and add a click handler
					control.find("img").last().click( function(ev) {
						Gallery_removeImage(ev, id);				
					});
					// look for our custom imageAddedEvent handler for this control
					var imageAdded = window["Event_imageAdded_" + id];
					// fire it if we found it
					if (imageAdded) window["Event_imageAdded_" + id]();
				}
			}
		}
		// remove the no pictures message if set
		if (imageSet) control.find("span").remove();
	} 
}
	        ]]>
	    </setDataJavaScript>
	    
	    <events>
	        <event>
	            <type>imageAdded</type>
	            <name>Imaged added</name>
	        </event>
	        <event>
	            <type>imageRemoved</type>
	            <name>Image removed</name>
	        </event>
	    </events>
	    
	    <styles>
	        <style>
	            <name>Gallery</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id;
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	        <style>
	            <name>Images</name>  
	            <getAppliesToFunction>
					<![CDATA[	      
return "#" + this.id + " img";
	       			 ]]>	                
	            </getAppliesToFunction>
	        </style>
	    </styles>
	    
	   	<initJavaScript>
	        <![CDATA[
$("#" + id).children("img").click( function(ev) {
	var details = window[id + "details"];
	if (details) {
		if (details.onImageClick == "large") {
			Gallery_showImage(ev,id);
		} else if (details.onImageClick == "caption") {
			var index = $(ev.target).index();
			if (details.captions && details.captions[index]) alert(details.captions[index]);
		} else {
			Gallery_removeImage(ev, id);			
		}
	}		
});	        
	        ]]>	        	       	        
	    </initJavaScript>
	    
	   	<runtimeProperties>
	   	    <runtimeProperty>
	   	        <type>imageCount</type>
	   	        <name>Image count</name>
	   	        <getPropertyFunction>
			        <![CDATA[
return $("#" + id).children("img").length;     
			        ]]>	  	   	            
	   	        </getPropertyFunction>
	   	    </runtimeProperty>
	   	    <runtimeProperty>
	   	        <type>urls</type>
	   	        <name>Urls</name>
	   	        <getPropertyFunction>
			        <![CDATA[
var urls = "";
var control = $("#" + id);
var images = control.children("img");
images.each( function(i) {
	var url = $(this).attr("src");
	if (url) {
		urls += url.replace("http://cache/","").replace("http://images/","");
		if (i < images.length - 1) urls += ",";
	}
});
if (urls) {
	return urls;
} else {
	return null;
}    
			        ]]>	  	   	            
	   	        </getPropertyFunction>
	   	    </runtimeProperty>
	   	</runtimeProperties>
	    	    
	</control>
</controls>