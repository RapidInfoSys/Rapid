<?xml version="1.0" encoding="ISO-8859-1" ?>
<actions xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/action.xsd">

<!-- 

Copyright (C) 2016 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

    <action>
    
        <type>mobile</type>
        <name>Mobile</name>
	    <class>com.rapid.actions.Mobile</class>
	    <helpHtml>Unique for Rapid Mobile applications, this action allows you to perform a multitude of mobile actions, such as dialing a number, sending a text, taking a picture, or scanning a barcode or QR code.</helpHtml>
	    
	    <addToNewMobileApplications>true</addToNewMobileApplications>
	    	
		<properties>
		    
	        <property>
	            <key>actionType</key>
	            <name>Type</name>
	            <setConstructValueFunction>return "dial";</setConstructValueFunction>
	            <changeValueJavaScript>mobileActionType</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Defines the type of mobile action that will be carried out, such as dialing a number, scanning a barcode or sending a GPS location.</helpHtml>
	        </property>
	        
	        <property>
	            <key>numberControlId</key>
	            <name>Phone number source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.numberControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the phone number is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>numberField</key>
	            <name>Phone number source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the phone number source. An example of use would be getting the phone number from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>emailControlId</key>
	            <name>Email address source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.numberControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the email address is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>emailField</key>
	            <name>Email address source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the email address source. An example of use would be getting the email address from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>subjectControlId</key>
	            <name>Subject source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.numberControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the email subject is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>subjectField</key>
	            <name>Email source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the email subject source. An example of use would be getting the email subject from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>numberControlId</key>
	            <name>Phone number source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.numberControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the phone number is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>numberField</key>
	            <name>Phone number source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the phone number source. An example of use would be getting the phone number from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>messageControlId</key>
	            <name>Message source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.messageControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the message is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>messageField</key>
	            <name>Message source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the message source. An example of use would be getting the message from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>urlControlId</key>
	            <name>URL source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.messageControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the URL is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>urlField</key>
	            <name>URL source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the URL source. An example of use would be getting the URL from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>galleryControlId</key>
	            <name>Gallery control</name>
	            <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getControlOptions(this.galleryControlId, null, "gallery");
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Selects which gallery control to use on the page. You will need to have a gallery control on the page in order to use this.</helpHtml>
	        </property>
	        
	        <property>
	            <key>imageMaxSize</key>
	            <name>Max width/height (px)</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "500";</setConstructValueFunction>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <helpHtml>Sets the maximum height and width of the gallery. By default it sets to 500 pixels in length and width.</helpHtml>
	        </property>
	        
	        <property>
	            <key>imageQuality</key>
	            <name>Quality (%)</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "50";</setConstructValueFunction>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <helpHtml>Sets the quality of the image, in percentages. By default it sets the quality to 50% of that of the original.</helpHtml>
	        </property>
	        
	         <property>
	            <key>galleryControlIds</key>
	            <name>Controls</name>
	            <visible>false</visible>
	            <changeValueJavaScript>galleryControls</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Sets the gallery or signature control on the page to put the image in to.</helpHtml>
	        </property>
	        
	         <property>
	            <key>barcodeDestinations</key>
	            <name>Destinations</name>
	            <visible>false</visible>
	            <changeValueJavaScript>datacopyDestinations</changeValueJavaScript>
	            <helpHtml>Sets the destination for where to place the barcode data on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>successActions</key>
	            <name>Success actions</name>
	            <visible>false</visible>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <helpHtml>Allows you to set a success action for when the image is successfully imported into the control specified.</helpHtml>
	        </property>
	        
	        <property>
	            <key>errorActions</key>
	            <name>Error actions</name>
	            <visible>false</visible>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <helpHtml>Allows you to set an error action for when the image is not successfully imported into the control specified.</helpHtml>
	        </property>
	        	        
	        <property>
	            <key>navigateControlId</key>
	            <name>Navigate to source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.navigateControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>The control that holds the data of where we want to navigate to.</helpHtml>
	        </property>
	        
	        <property>
	            <key>navigateField</key>
	            <name>Navigate to source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the source of where we want to navigate to. An example of use would be from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>navigateSearchFields</key>
	            <name>Navigate to search fields</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Fields in the navigate to source control to use to search for the location to navigate to.</helpHtml>
	        </property>
	        
	         <property>
	            <key>navigateMode</key>
	            <name>Navigation mode</name>
	            <visible>false</visible>
	            <setConstructValueFunction>
	                <![CDATA[
return "d";
	                ]]>
	            </setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [["d","driving"],["w","walking"],["b","cycling"],["transit","public transport"]];
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets the type of transport being used to navigate, such as public transport.</helpHtml>
	        </property>
	        
	        <property>
	            <key>message</key>
	            <name>Message</name>
	            <visible>false</visible>
	            <changeValueJavaScript>bigtext</changeValueJavaScript>
	            <helpHtml>Sets a message to display in the status bar.</helpHtml>
	        </property>
	        	        	        
	        <property>
	            <key>gpsDestinations</key>
	            <name>Destinations</name>
	            <visible>false</visible>
	            <changeValueJavaScript>datacopyDestinations</changeValueJavaScript>
	            <helpHtml>Sets which control on the page will hold the GPS location sent.</helpHtml>
	        </property>
         	        
	        <property>
	            <key>gpsFrequency</key>
	            <name>Update frequency</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return 0;</setConstructValueFunction>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <helpHtml>Sets the number of seconds between the latest GPS position being sent. A value of 0 means the position will only be sent once.</helpHtml>
	        </property>
	        
	        <property>
	            <key>gpsCheck</key>
	            <name>Check GPS enabled</name>
	            <visible>false</visible>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <helpHtml>Sets whether to check if the mobile device has GPS enabled or not.</helpHtml>
	        </property>
	        
	        <property>
	            <key>swipeDirection</key>
	            <name>Direction</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "left";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>return ["left","right","down","up"];</getValuesFunction>
	            <helpHtml>The direction the fingers are swiped in</helpHtml>
	        </property>
	        
	        <property>
	            <key>swipeFingers</key>
	            <name>Number of fingers</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "any";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>return ["any","1","2"];</getValuesFunction>
	            <helpHtml>The number of fingers used in the swipe</helpHtml>
	        </property>
	        
	        <property>
	            <key>swipeControl</key>
	            <name>Control</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "html";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option><option value ='html'" + (this.swipeControl == "html" ? "selected='selected'" : "") + ">page</option>" + getControlOptions(this.swipeControl);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>The control the swipe is performed on</helpHtml>
	        </property>
	        
	        <property>
	            <key>onlineActions</key>
	            <name>Actions</name>
	            <visible>false</visible>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <helpHtml>Allows you to define actions to be carried out applicable to the type. For example if the mobile device was swiped, or has an established internet connection.</helpHtml>
	        </property>
	        
	        <property>
	            <key>onlineWorking</key>
	            <name>Working dialogue</name>
	            <visible>false</visible>
	            <changeValueJavaScript>navigationPage</changeValueJavaScript>
	            <helpHtml>Sets a page to appear as dialogue if the mobile device is connected online.</helpHtml>
	        </property>
	        
	        <property>
	            <key>onlineFail</key>
	            <name>Offline dialogue</name>
	            <visible>false</visible>
	            <changeValueJavaScript>navigationPage</changeValueJavaScript>
	            <helpHtml>Sets a page to appear as dialogue if the mobile device is not connected to the Internet.</helpHtml>
	        </property>
	        
	    </properties>
	    
		<resources>
		    
	        <resource>
	            <type>javascriptFile</type>
	            <contents>
	               scripts/controls/map.js
	            </contents>
            </resource>
            
	        <resource>
	            <type>javascriptLink</type>
	            <contents>scripts_min/jquery.touchSwipe.min.js</contents>
	        </resource>
            
		</resources>
	    
		<actionJavaScript>
	        <![CDATA[ 
	          
function Action_mobile(actionId, type) {
	// action callback
	alert("Callback for " + actionId + "." + type);
}

// a map of swipe handlers as the plugin only allows one handler to be registerd at a time
_swipeHandlers = {};

// a function to check the map of handlers and call any number of functions
function handleSwipe(event, direction, distance, duration, fingers, fingerData, target, ev) {
	// get the handlers for a target
	var handlers = _swipeHandlers[target];
	// loop them
	for (var i in handlers) {
		// get the hanlder
		var handler = handlers[i];
		// if the directions match and either the fingers match too, or are all/any, run the function!
		if (handler.direction == direction && (handler.fingers == fingers || handler.fingers == 0)) handler.function(ev);
	}
}

			]]>
	    </actionJavaScript>
	  
    </action> 
</actions>