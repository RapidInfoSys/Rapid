<?xml version="1.0" encoding="UTF-8" ?>
<actions xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/action.xsd">

<!-- 

Copyright (C) 2019 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

    <action>
    
        <type>mobile</type>
        <name>Mobile</name>
	    <class>com.rapid.actions.Mobile</class>
	    <helpHtml>Runs specialised actions for mobile devices (start a phone call, take a photo, scan a barcode, etc.).</helpHtml>
	    
	    <addToNewMobileApplications>true</addToNewMobileApplications>

		<properties>
		    
	        <property>
	            <key>actionType</key>
	            <name>Type</name>
	            <setConstructValueFunction>return "dial";</setConstructValueFunction>
	            <changeValueJavaScript>mobileActionType</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Defines the type of mobile action that will be carried out, such as dialing a number, scanning a barcode or sending a GPS location.</helpHtml>
	        </property>
	        
	        <property>
	            <key>numberControlId</key>
	            <name>Phone number source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.numberControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the phone number is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>numberField</key>
	            <name>Phone number source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the phone number source. An example of use would be getting the phone number from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>emailControlId</key>
	            <name>Email address source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.numberControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the email address is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>emailField</key>
	            <name>Email address source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the email address source. An example of use would be getting the email address from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>subjectControlId</key>
	            <name>Subject source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.numberControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the email subject is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>subjectField</key>
	            <name>Email source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the email subject source. An example of use would be getting the email subject from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>numberControlId</key>
	            <name>Phone number source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.numberControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the phone number is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>numberField</key>
	            <name>Phone number source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the phone number source. An example of use would be getting the phone number from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>messageControlId</key>
	            <name>Message source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.messageControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the message is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>messageField</key>
	            <name>Message source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the message source. An example of use would be getting the message from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>urlControlId</key>
	            <name>URL source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.messageControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets where the URL is coming from on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>urlField</key>
	            <name>URL source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the URL source. An example of use would be getting the URL from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>galleryControlId</key>
	            <name>Gallery control</name>
	            <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getControlOptions(this.galleryControlId, null, "gallery");
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Selects which gallery control to use on the page. You will need to have a gallery control on the page in order to use this.</helpHtml>
	        </property>
	        
	        <property>
	            <key>imageMaxSize</key>
	            <name>Max width/height (px)</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "500";</setConstructValueFunction>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <helpHtml>Sets the maximum height and width of the gallery. By default it sets to 500 pixels in length and width.</helpHtml>
	        </property>
	        
	        <property>
	            <key>imageQuality</key>
	            <name>Quality (%)</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "50";</setConstructValueFunction>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <helpHtml>Sets the quality of the image, in percentages. By default it sets the quality to 50% of that of the original.</helpHtml>
	        </property>
	        
	         <property>
	            <key>galleryControlIds</key>
	            <name>Controls</name>
	            <visible>false</visible>
	            <changeValueJavaScript>galleryControls</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Sets the gallery or signature control on the page to put the image in to.</helpHtml>
	        </property>
	        
	         <property>
	            <key>barcodeDestinations</key>
	            <name>Destinations</name>
	            <visible>false</visible>
	            <changeValueJavaScript>datacopyDestinations</changeValueJavaScript>
	            <helpHtml>Sets the destination for where to place the barcode data on the page.</helpHtml>
	        </property>
	        
	        <property>
	            <key>successActions</key>
	            <name>Success actions</name>
	            <visible>false</visible>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <helpHtml>Allows you to set a success action for when the image is successfully imported into the control specified.</helpHtml>
	        </property>
	        
	        <property>
	            <key>errorActions</key>
	            <name>Error actions</name>
	            <visible>false</visible>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <helpHtml>Allows you to set an error action for when the image is not successfully imported into the control specified.</helpHtml>
	        </property>
	        	        
	        <property>
	            <key>navigateControlId</key>
	            <name>Navigate to source</name>
	             <visible>false</visible>
	            <changeValueJavaScript>select</changeValueJavaScript>
	             <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option>" + getInputOptions(this.navigateControlId);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>The control that holds the data of where we want to navigate to.</helpHtml>
	        </property>
	        
	        <property>
	            <key>navigateField</key>
	            <name>Navigate to source field</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Defines a more specific field for the source of where we want to navigate to. An example of use would be from a table cell within a table, where the cell is the field and the table is the source.</helpHtml>
	        </property>
	        
	        <property>
	            <key>navigateSearchFields</key>
	            <name>Navigate to search fields</name>
	             <visible>false</visible>
	            <changeValueJavaScript>text</changeValueJavaScript>
	            <helpHtml>Fields in the navigate to source control to use to search for the location to navigate to.</helpHtml>
	        </property>
	        
	         <property>
	            <key>navigateMode</key>
	            <name>Navigation mode</name>
	            <visible>false</visible>
	            <setConstructValueFunction>
	                <![CDATA[
return "d";
	                ]]>
	            </setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return [["d","driving"],["w","walking"],["b","cycling"],["transit","public transport"]];
	                ]]>
	            </getValuesFunction>
	            <helpHtml>Sets the type of transport being used to navigate, such as public transport.</helpHtml>
	        </property>
	        
	        <property>
	            <key>message</key>
	            <name>Message</name>
	            <visible>false</visible>
	            <changeValueJavaScript>bigtext</changeValueJavaScript>
	            <helpHtml>Sets a message to display in the status bar.</helpHtml>
	        </property>
	        	        	        
	        <property>
	            <key>gpsDestinations</key>
	            <name>Destinations</name>
	            <visible>false</visible>
	            <changeValueJavaScript>datacopyDestinations</changeValueJavaScript>
	            <helpHtml>Sets which control on the page will hold the GPS location sent.</helpHtml>
	        </property>
         	        
	        <property>
	            <key>gpsFrequency</key>
	            <name>Update frequency</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return 0;</setConstructValueFunction>
	            <changeValueJavaScript>integer</changeValueJavaScript>
	            <helpHtml>Sets the number of seconds between the latest GPS position being sent. A value of 0 means the position will only be sent once.</helpHtml>
	        </property>
	        
	        <property>
	            <key>gpsCheck</key>
	            <name>Check GPS enabled</name>
	            <visible>false</visible>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <helpHtml>Sets whether to check if the mobile device has GPS enabled or not.</helpHtml>
	        </property>
	        
	        <property>
	            <key>swipeDirection</key>
	            <name>Direction</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "left";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>return ["left","right","down","up"];</getValuesFunction>
	            <helpHtml>The direction the fingers are swiped in</helpHtml>
	        </property>
	        
	        <property>
	            <key>swipeFingers</key>
	            <name>Number of fingers</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "any";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>return ["any","1","2"];</getValuesFunction>
	            <helpHtml>The number of fingers used in the swipe</helpHtml>
	        </property>
	        
	        <property>
	            <key>swipeControl</key>
	            <name>Control</name>
	            <visible>false</visible>
	            <setConstructValueFunction>return "html";</setConstructValueFunction>
	            <changeValueJavaScript>select</changeValueJavaScript>
	            <getValuesFunction>
	                <![CDATA[
return "<option value=''>Please select...</option><option value ='html'" + (this.swipeControl == "html" ? "selected='selected'" : "") + ">page</option>" + getControlOptions(this.swipeControl);
	                ]]>
	            </getValuesFunction>
	            <helpHtml>The control the swipe is performed on</helpHtml>
	        </property>
	        
	        <property>
	            <key>onlineActions</key>
	            <name>Actions</name>
	            <visible>false</visible>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <helpHtml>Allows you to define actions to be carried out applicable to the type. For example if the mobile device was swiped, or has an established internet connection.</helpHtml>
	        </property>
	        
	        <property>
	            <key>onlineWorking</key>
	            <name>Working dialogue</name>
	            <visible>false</visible>
	            <changeValueJavaScript>navigationPage</changeValueJavaScript>
	            <helpHtml>Sets a page to appear as dialogue if the mobile device is connected online.</helpHtml>
	        </property>
	        
	        <property>
	            <key>onlineFail</key>
	            <name>Offline dialogue</name>
	            <visible>false</visible>
	            <changeValueJavaScript>navigationPage</changeValueJavaScript>
	            <helpHtml>Sets a page to appear as dialogue if the mobile device is not connected to the Internet.</helpHtml>
	        </property>
	        
	    </properties>
	    
		<resources>
		    
	        <resource>
	            <type>javascriptFile</type>
	            <contents>
	               scripts/controls/map.js
	            </contents>
            </resource>
            
	        <resource>
	            <type>javascriptLink</type>
	            <contents>scripts_min/jquery-touchSwipe-1.6.18.min.js</contents>
	        </resource>
	        
	        <resource>
	        	<type>css</type>
	        	<contents>
.cameraControlBasic {
	background: black;
	outline: none;
	padding: 10px;
	margin: 20px;
	border-radius: 50%;
	width: 60px;
	text-align: center;
}

.cameraControl {
	background: black;
	outline: none; 
	padding: 14px; 
	border-radius: 50%; 
	border-color: white;
}

.cameraIcon {
	font-size: 38px;
	color: white;
}

#cameraVideoContainer {
	position:fixed; 
	left:0; 
	right:0; 
	top:0; 
	bottom:0; 
	width:100%; 
	height:100%;
	background: #111;
	display: none;
}

#cameraPlayer {
	width:100%; 
	height:100%; 
	object-fit:contain;
}

	        	</contents>
	        </resource>
            
		</resources>
	    
		<actionJavaScript>
	        <![CDATA[ 
	          
function Action_mobile(actionId, type) {
	// action callback
	alert("Callback for " + actionId + "." + type);
}

// a map of swipe handlers as the plugin only allows one handler to be registerd at a time
_swipeHandlers = {};

// a function to check the map of handlers and call any number of functions
function handleSwipe(event, direction, distance, duration, fingers, fingerData, target, ev) {
	// get the handlers for a target
	var handlers = _swipeHandlers[target];
	// loop them
	for (var i in handlers) {
		// get the hanlder
		var handler = handlers[i];
		// if the directions match and either the fingers match too, or are all/any, run the function!
		if (handler.direction == direction && (handler.fingers == fingers || handler.fingers == 0)) handler.function(ev);
	}
}

var _cameraPlayer;
var _availableCameras = [];
var _currentFacingMode = "user";
var _galleryControlId;
var _size;
var _quality;

function hasGetUserMedia() {

	// Return the value's truthy boolean value (e.g. if its null, will return false)
	return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia)
	
}

function getAvailableCameras() {
	
	if (hasGetUserMedia()) {
		
		navigator.mediaDevices.enumerateDevices()
		.then(function(devices){
			
			devices.forEach(function(device){
			
				if (device.kind === "videoinput") {
					console.log(device.kind + ": " + device.label + " id = " + device.deviceId);
					_availableCameras.push(device.deviceId);

				}
				
			});
		
		})
		.catch(function(err){
			
			console.log(err.name + ": " + err.message);
			
		});
		
	}
	
}

function turnOnCamera(galleryControlId, size, quality) {
	
	if (hasGetUserMedia()) {
		
		_galleryControlId = galleryControlId;
		_size = size;
		_quality = quality;
		_cameraPlayer = document.getElementById("cameraPlayer");
		
		if (!_cameraPlayer) {
		
			// Add the divs
			var cameraPreviewHtml = "<div id='cameraVideoContainer'>"
								  + "<video id='cameraPlayer' autoplay></video>"
								  + "<button id='btnToggleCamera' class='cameraControlBasic' style='position:absolute; left:0;'><i class='fa fa-retweet cameraIcon' style='margin-left:-2px;'></i></button>"
								  + "<button id ='btnCloseCamera' class='cameraControlBasic' style='position:absolute; right:0;'><i class='fa fa-times cameraIcon'></i></button>"
								  + "<button id ='btnTakePicture' class='cameraControl' style='position:absolute; left:50%; right:0; bottom:0; transform:translateX(-50%); margin:20px auto;'><i class='fa fa-camera cameraIcon'></i></button>"
								  + "</div>"
								  + "<canvas id='mobileaction_canvas' style='display:none;'></canvas>";
								 
			$("body").append(cameraPreviewHtml);
			
			$("#btnTakePicture").click(takePicture);
			
			$("#btnToggleCamera").click(toggleCameraFacing);
			
			$("#btnCloseCamera").click(turnOffCamera);
				
			_cameraPlayer = document.getElementById("cameraPlayer");
		
		}
		
		_cameraPlayer.setAttribute("data-galleryId",galleryControlId);
		
		// Specify the types of media to request, along with any requirements for each type
		var constraints = {
		   video: {facingMode: _currentFacingMode}
		};

		// Obtain the user media object
		navigator.mediaDevices.getUserMedia(constraints)
		.then(function(stream) {
			// Use the stream
			// Now attach the video stream to the video element and auto play
			_cameraPlayer.srcObject = stream;
			
			// Get all the available cameras into global array
			getAvailableCameras();
			
		})	// Wait for the loadedmetadata event, before displaying the cameraDiv
		.then(() => new Promise(resolve => _cameraPlayer.onloadedmetadata = resolve))
		.then(function(){
			// Display the cameraPlayer
			$("#cameraVideoContainer").show();
		})
		.catch(function(err) {
			// Handle the error
			console.log(err.name + ": " + err.message);
			alert("Not allowed: " + err);
		});
		
	} else {
		
		alert("getUserMedia() is not supported by your browser");
		
	}
	
}

function turnOffCamera () {

	if (hasGetUserMedia()) {
		// Stop all video streams attached to the video element
		_cameraPlayer.srcObject.getVideoTracks().forEach(function(track){
			// Close the preview
			$("#cameraVideoContainer").hide();
			track.stop();
		});
	}
	
}

function stopCameraStream () {

	if (hasGetUserMedia()) {
		// Stop all video streams attached to the video element
		_cameraPlayer.srcObject.getVideoTracks().forEach(function(track){
			// Close the preview
			track.stop();
		});
	}
	
}


function takePicture (ev) {
	
	if (hasGetUserMedia()) {
		
		var galleryControlId = _cameraPlayer.getAttribute("data-galleryId");
		var galleryDetails = window[galleryControlId + "details"];
		
		var canvas = document.getElementById("mobileaction_canvas");
		var canvasContext = canvas.getContext("2d");
		
		// Set the width and height of the canvas, before drawing
		// Get the intrinsic width and height of the videoplayer
		let vWidth = _cameraPlayer.videoWidth;
		let vHeight = _cameraPlayer.videoHeight;	
		
		// Find the longest side of the videoplayer
		if (vHeight > vWidth) {
			
			canvas.height = _size;
			canvas.width = (vWidth / vHeight) * _size;
			
		} else {
		
			canvas.height = (vHeight / vWidth) * _size;
			canvas.width = _size;
			
		}
		
		// Draw a single video frame in the player to the canvas
		canvasContext.drawImage(_cameraPlayer, 0, 0, canvas.width, canvas.height);
		
		// Turn-off the camera
		turnOffCamera();
		
		// Get a data url of the canvas, containing a representation of the image
		// Default format type is image/png
		var dataURL = canvas.toDataURL();
		
		// call gallery set data to display image
		setData_gallery(ev, galleryControlId, "url", galleryDetails, dataURL);
		
	}
	
}

function toggleCameraFacing () {
	
	if (_availableCameras.length > 1) {
		
		if (_currentFacingMode === "environment") {
			_currentFacingMode = "user";
		} else {
			_currentFacingMode = "environment";
		}
		
		stopCameraStream ();
		turnOnCamera(_galleryControlId, _size, _quality);
		
	}

}

function base64toBlob(base64Data, contentType) {

    contentType = contentType || '';
    var sliceSize = 1024;
    // The atob function will decode a base64-encoded string into a new string with a character for each byte of the binary data.
    var byteCharacters = atob(base64Data);
    var bytesLength = byteCharacters.length;
    var slicesCount = Math.ceil(bytesLength / sliceSize);
    var byteArrays = new Array(slicesCount);
    for (var sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {
        var begin = sliceIndex * sliceSize;
        var end = Math.min(begin + sliceSize, bytesLength);

        var bytes = new Array(end - begin);
        for (var offset = begin, i = 0; offset < end; ++i, ++offset) {
            bytes[i] = byteCharacters[offset].charCodeAt(0);
        }
        // Convert this array of byte values into a real typed byte array by passing it to the Uint8Array constructor.
        byteArrays[sliceIndex] = new Uint8Array(bytes);
    }
    // Convert byte array to a Blob
    return new Blob(byteArrays, { type: contentType });
    
}

function uploadImages(controlIds, successCallback, errorCallback) {

	// If we have one
	if (controlIds && controlIds.length > 0) {
		
		// Loop the control ids, will be gallery or a signature, for gallery get all images, upload use data-filename attribute as file name, on success
		

		// images we are going to upload
		var images = [];
		
		for (var idx in controlIds) {
		
			let controlId = controlIds[idx];
		
			let control = $("#" + controlId);
			
			// Check if this is a gallery control or signature
			if (control.hasClass("gallery")) {
			
				// Get all the images from the control
				control.find("img").each(function(){
					
					let img = $(this);
					
					images.push({url:"~?a=" + _appId + "&action=uploadImage&name=" + img.attr("data-filename"),dataURL:img.attr("src")});
										
				});
			
			} else if (control.hasClass("signature")) {
												
				// Its a signature control - get the dataUrl from the signature
				// Get a data url of the canvas, containing a representation of the image
				// Default format type is image/png
				
				let signature = _signatureControls[controlId];

				// Get the current date
				var date = new Date();
				var dateString = date.getFullYear() + "" + padNumberWithZeros(date.getMonth() + 1,2) + "" + padNumberWithZeros(date.getDate(),2) + "_" + padNumberWithZeros(date.getHours(),2) + "" + padNumberWithZeros(date.getMinutes(),2) + "" + padNumberWithZeros(date.getSeconds(),2) + "" + padNumberWithZeros(date.getMilliseconds(),3);
				let fileName = 	dateString + ".png";

				images.push({url:"~?a=" + _appId + "&action=uploadImage&name=" + fileName,dataURL:signature.toDataURL()});
							
			}
			
		}
		
		// if there are any no images to upload
		if (images.length == 0) {
			
			// call the success immediately
			window[successCallback](ev);
			
		} else {
		
			// make a progress object set total uploads to size of images
			var progress = {totalUploads:images.length,totalUploaded:0};
			
			// loop images to upload
			for (var i in images) {
				// get the image
				var image = images[i];
				// send it for uploading
				uploadImage(image.url, image.dataURL, progress, successCallback, errorCallback);
			}
			
		}
		
	}
	
}

function uploadImage(url, dataSource, progress, successCallback, errorCallBack) {

	var sourceParts = dataSource.split(",");
	var dataString = "data:";
	var contentType = "";
	
	if(sourceParts && sourceParts.length && sourceParts[0].indexOf(dataString) > -1) {
	
		// If dataSource starts with data: dig out contentType
		let dataParts = sourceParts[0].split(";");
		
		contentType = dataParts[0].substring(dataString.length);
		
		dataSource = sourceParts[1];
	}
	
	var data = base64toBlob(dataSource, contentType);

	// POST
	$.ajax({
		url:url,
		type:"POST",
		processData: false,  	// tell jQuery not to process the data
   		contentType: false,  	// tell jQuery not to set contentType
		data: data,
		success: function(ev) {
			progress.totalUploaded ++;
			if (progress.totalUploaded == progress.totalUploads && successCallback) window[successCallback](ev);
		},
		error: function(ev) {
			if (!errored) {
				errored = true;
				if (errorCallBack) window[errorCallback](ev);
			}
		}
	});

}

			]]>
	    </actionJavaScript>
	  
    </action> 
</actions>