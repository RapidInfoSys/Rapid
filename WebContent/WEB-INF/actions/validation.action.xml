<?xml version="1.0" encoding="ISO-8859-1" ?>
<actions xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/action.xsd">

<!-- 

Copyright (C) 2014 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

RapidSOA is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

    <action>
    
        <type>validation</type>
        <name>Validation</name>	        
	    <class>com.rapid.actions.Validation</class>	
	    
	    <addToNewApplications>true</addToNewApplications>    
	    
	    <properties>
	        
	        <property>
	            <key>controls</key>
	            <name>Controls</name>
	            <changeValueJavaScript>validationControls</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>		 
	        </property>
	        
	        <property>
	            <key>showMessages</key>
	            <name>Apply styling</name>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>	 
	        </property>
	        
	        <property>
	            <key>stopActions</key>
	            <name>Stop further actions</name>
	            <setConstructValueFunction>return true;</setConstructValueFunction>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>	 	            
	        </property>
	        
	        <property>
	            <key>passActions</key>
	            <name>Pass actions</name>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>		 
	        </property>
	        
	        <property>
	            <key>failActions</key>
	            <name>Fail actions</name>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>		 
	        </property>
	        
	    </properties>
	    
	    <resources>
	        <resource>
	            <type>file</type>
	            <contents>images/alert_16x16.png</contents>
	        </resource>
	                    <resource>
                <type>css</type>
                <contents>
                    <![CDATA[
                                     
div.validation {
	padding: 10px;
	color: red;
	font-weight: bold;
}

label.validation {
	border: 2px solid red;
}

input.validation {
	border: 2px solid red;
}

textarea.validation {
	border: 2px solid red;
}  

li.validation {
  color:red;
}                  

                    ]]>
                </contents>                
            </resource> 
	    </resources>
	    	    	    
	    <actionJavaScript>
	        <![CDATA[   
function Action_validation(ev, validations, showMessages) {
	var valid = true;		
	for (var i in validations) {
		var validation = validations[i];
		var validationControl = $("#" + validation.controlId);
		if (validationControl[0]) {		
			var getValueFunction = null;
			if (validation.validationProperty) {
				getValueFunction = window["getProperty_" + validation.controlType + "_" + validation.validationProperty];
			} else {
				getValueFunction = window["getData_" + validation.controlType];
			}
			if (getValueFunction) {
				var value = getValueFunction(ev, validation.controlId, validation.field, validation.details);
				if (validation.validationType == "javascript") {						
					var validationFunction = new Function(["ev","id","value"], validation.javaScript);
					var failMessage = validationFunction.apply(this, [ev,validation.controlId,value]);
					if (failMessage != null && failMessage !== false && failMessage !== undefined) {
						if (showMessages) showControlValidation(validation.controlId, failMessage);
						valid = false;
					} else {
						if (showMessages) hideControlValidation(validation.controlId);
					}
				} else {
					// assume no pass
					var pass = false;
					// start with some basic checks
					if (value) {
						// make a regex
						var regex = new RegExp(validation.regEx);
						// get the matches from the reg ex
						var matches = value.match(regex);
						// ensure the first match is for the whole value
						if (matches) {
							// got some matches now groups must match too
							if (matches.length == 1) {
								// these are the easy ones
								pass = true;
							} else {
								// we now need to loop all of the groups
								for (var i in matches) {
									if (i != "index" && i != "input" && matches[i] == value) {
										// we're good
										pass = true;
										break;
									}
								}
							}
						} 
					} else if (validation.allowNulls) {
						// no value but this is allowed
						pass = true;
					}
					// pass, or hidden and allowed this way
					if (pass || (validationControl.is(":hidden") && validation.passHidden)) {
						// passed
						if (showMessages) hideControlValidation(validation.controlId);				
					} else {
						// failed, and there is a message to show, but not on tab keyup
						if (showMessages && !(ev.type == "keyup" && ev.keyCode == 9)) showControlValidation(validation.controlId, validation.message);
						valid = false;					
					}	
				}	
			} else {
				if (showMessages) showControlValidation(validation.controlId, validation.message);
				valid = false;
			}
		}		
	}	
	return valid;
}	        ]]>
	    </actionJavaScript> 
	    
    </action> 
    
</actions>