<?xml version="1.0" encoding="UTF-8" ?>
<actions xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/action.xsd">

<!-- 

Copyright (C) 2014 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

RapidSOA is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

    <action>
    
        <type>database</type>
        <name>Database</name>	        
	    <class>com.rapid.actions.Database</class>	
	    
	    <addToNewApplications>true</addToNewApplications> 
	    	    	    	    
	    <properties>
	        <property>
	            <key>query</key>
	            <name>Query</name>
	            <changeValueJavaScript>databaseQuery</changeValueJavaScript>	 
	        </property>	  
	        <property>
	            <key>showLoading</key>
	            <name>Loading animation</name>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>	 
	        </property>	
	        <property>
	            <key>childDatabaseActions</key>
	            <name>Child actions</name>
	            <changeValueJavaScript>databaseChildActions</changeValueJavaScript>	 
	        </property>
	        <property>
	            <key>successActions</key>
	            <name>Success actions</name>
	            <changeValueJavaScript>childActions</changeValueJavaScript>	 
	        </property>
	        <property>
	            <key>errorActions</key>
	            <name>Error actions</name>
	            <changeValueJavaScript>childActions</changeValueJavaScript>	 
	        </property>      
	    </properties>	 
	    
	    <resources>
	        <resource>
	    		<type>file</type>
	    		<contents>images/wait_120x15.gif</contents>
	    	</resource>
	    	<resource>
	    		<type>javascript</type>
	    		<contents>
	    			<![CDATA[
// this global associative array tracks the databaseAction call sequences for each action	    			
var _databaseActionSequence = [];	    

// this global associative array holds the greates sequence received back     			
var _databaseActionMaxSequence = [];	

// this function returns an incrementing sequence for each database action call so long-running slow queries don't overrwrite fast later queries
function getDatabaseActionSequence(actionId) {
	// retrieve the current sequence for the action
	var sequence = _databaseActionSequence[actionId];
	// if null set to 0
	if (!sequence) sequence = 0
	// increment
	sequence++;
	// store
	_databaseActionSequence[actionId] = sequence;
	// pass back
	return sequence;
}		

// this function sets the max to 0 if null
function getDatabaseActionMaxSequence(actionId) {
	// retrieve the current sequence for the action
	var sequence = _databaseActionMaxSequence[actionId];
	// if undefined
	if (sequence === undefined) {
		// set to 0
		sequence = 0;
		// retain for next time
		_databaseActionMaxSequence[actionId] = sequence;
	}
	// pass back
	return sequence;
}	
	    			]]>
	    		</contents>
	    	</resource>
	    </resources>
	    	    	    	    	     
	    <actionJavaScript>
	        <![CDATA[ 
function Action_database(actionId, data, outputs) {
	// check we got data and somewhere to put it
	if (data && outputs) {
		// check the returned sequence is higher than any others received so far
		if (data.sequence > getDatabaseActionMaxSequence(actionId)) {
			// retain this sequence as the new highest
			_databaseActionMaxSequence[actionId] = data.sequence;
			for (var i in outputs) {
				var output = outputs[i];			
				window["setData_" + output.type](output.id, data, output.field, output.details);
			}
		}
	}
}	        ]]>
	    </actionJavaScript>
	     	    
    </action> 
</actions>