<?xml version="1.0" encoding="UTF-8" ?>
<actions xmlVersion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../schemas/action.xsd">

<!-- 

Copyright (C) 2014 - Gareth Edwards / Rapid Information Systems

gareth.edwards@rapid-is.co.uk


This file is part of the Rapid Application Platform

Rapid is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. The terms require you to include
the original copyright, and the license notice in all redistributions.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
in a file named "COPYING".  If not, see <http://www.gnu.org/licenses/>.

 -->

    <action>
    
        <type>database</type>
        <name>Database</name>	        
	    <class>com.rapid.actions.Database</class>	
	    
	    <addToNewApplications>true</addToNewApplications> 
	    	    	    	    
	    <properties>
	        
	        <property>
	            <key>query</key>
	            <name>Query</name>
	            <changeValueJavaScript>databaseQuery</changeValueJavaScript>
	            <refreshProperties>true</refreshProperties>
	            <helpHtml>Enables you to define a database query. SQL can be entered within the text area and a selected input and output field can be chosen. There is also a capability to test your SQL against a specified database connection.</helpHtml>
	        </property>	
	          
	        <property>
	            <key>showLoading</key>
	            <name>Loading animation</name>
	            <changeValueJavaScript>checkbox</changeValueJavaScript>
	            <helpHtml>Displays a loading animation whilst the database query executes.</helpHtml>
	        </property>	
	        
	        <property>
	            <key>childDatabaseActions</key>
	            <name>Child actions</name>
	            <changeValueJavaScript>databaseChildActions</changeValueJavaScript>
	            <helpHtml>Enables for further database queries to be defined for child databases.</helpHtml>
	        </property>
	        
	        <property>
	            <key>successActions</key>
	            <name>Success actions</name>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <helpHtml>Sets what events occur upon a successful query to the database.</helpHtml>
	        </property>
	        
	        <property>
	            <key>errorActions</key>
	            <name>Error actions</name>
	            <changeValueJavaScript>childActions</changeValueJavaScript>
	            <helpHtml>Sets what events occur upon an unsuccessful query to the database.</helpHtml>
	        </property>
	         
	    </properties>	 
	    
	    <resources>
	        <resource>
	    		<type>file</type>
	    		<contents>images/wait_120x15.gif</contents>
	    	</resource>
	    	<resource>
	    		<type>javascript</type>
	    		<contents>
	    			<![CDATA[
// this global associative array tracks the databaseAction call sequences for each action	    			
var _databaseActionSequence = [];	    

// this global associative array holds the greates sequence received back     			
var _databaseActionMaxSequence = [];	

// this function returns an incrementing sequence for each database action call so long-running slow queries don't overrwrite fast later queries
function getDatabaseActionSequence(actionId) {
	// retrieve the current sequence for the action
	var sequence = _databaseActionSequence[actionId];
	// if null set to 0
	if (!sequence) sequence = 0
	// increment
	sequence++;
	// store
	_databaseActionSequence[actionId] = sequence;
	// pass back
	return sequence;
}		

// this function sets the max to 0 if null
function getDatabaseActionMaxSequence(actionId) {
	// retrieve the current sequence for the action
	var sequence = _databaseActionMaxSequence[actionId];
	// if undefined
	if (sequence === undefined) {
		// set to 0
		sequence = 0;
		// retain for next time
		_databaseActionMaxSequence[actionId] = sequence;
	}
	// pass back
	return sequence;
}	

// this function creates input data for the database action
function getDatabaseActionInputData(multiRow, inputs, sourceId, sourceData) {
	// start data object
	var data = {};
	// check multirow
	if (multiRow) {
		// check there are sourceData rows
		if (sourceData && sourceData.fields && sourceData.rows && sourceData.fields.length > 0 && sourceData.rows.length > 0) {
			// add a fields collection
			data.fields = [];
			// loop the inputs
			for (var i in inputs) {
				// the field we want to send is the source id plus the field, this matches how we do non multi row queries
				data.fields.push(sourceId + "." + inputs[i]);
			}
			// add a rows collection
			data.rows = [];
			// loop the sourceData rows
			for (var i in sourceData.rows) {
				// get the source row
				var sourceRow = sourceData.rows[i];
				// make a row for our return
				var row = [];
				// now loop the inputs
				for (var j in inputs) {
					// get the input field
					var field = inputs[j];
					// assume we can't find the field we want
					var fieldIndex = -1;
					// loop the source fields looking for the position of the field we want
					for (var k in sourceData.fields) {
						if (field.toLowerCase() == sourceData.fields[k].toLowerCase()) {
							// set the fieldIndex
							fieldIndex = k;
							// we're done
							break;
						}
					}
					// if we found the field
					if (fieldIndex > -1) {
						row.push(sourceRow[fieldIndex]);
					} else {
						row.push(null);
					}
				}
				// add the row
				data.rows.push(row);
			}
		} else {
			// add a dummy row 
			data.rows = [];
			data.rows.push([]);
		}
	} else {
		// not multirow so add fields 
		data.fields = [];
		// add a single row for the values
		data.rows = [];
		data.rows.push([]);
		// loop the inputs and add id as field, value as row
		for (var i in inputs) {
			var input = inputs[i];
			data.fields.push(input.id);
			data.rows[0].push(input.value);
		}
	}
	// return data
	return data
}
	    			]]>
	    		</contents>
	    	</resource>
	    </resources>
	    	    	    	    	     
	    <actionJavaScript>
	        <![CDATA[ 
function Action_database(ev, actionId, data, outputs) {
	// check we got data and somewhere to put it
	if (data && outputs) {
		// check the returned sequence is higher than any others received so far
		if (data.sequence > getDatabaseActionMaxSequence(actionId)) {
			// retain this sequence as the new highest
			_databaseActionMaxSequence[actionId] = data.sequence;
			for (var i in outputs) {
				var output = outputs[i];			
				window["setData_" + output.type](ev, output.id, output.field, output.details, data);
			}
		}
	}
}	        ]]>
	    </actionJavaScript>
	     	    
    </action> 
</actions>